name: Test

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  GO_VERSION: '1.23.0'

jobs:
  # Go backend tests
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23.0']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run tests with race detector
        run: go test -race ./...

      - name: Generate coverage report
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Smart contract tests
  test-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: contracts/ethereum/package-lock.json

      - name: Install dependencies
        working-directory: contracts/ethereum
        run: npm ci

      - name: Run Hardhat tests
        working-directory: contracts/ethereum
        run: npm test

      # Coverage disabled due to timeout issues with complex contracts
      # - name: Generate coverage report
      #   working-directory: contracts/ethereum
      #   run: npm run coverage
      #
      # - name: Upload coverage artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: contracts-coverage
      #     path: contracts/ethereum/coverage

  # Linting and code quality
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -l .
            exit 1
          fi

      - name: Set up Node.js for Solidity linting
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: contracts/ethereum/package-lock.json

      - name: Install contract dependencies
        working-directory: contracts/ethereum
        run: npm ci

      - name: Run Solidity linting
        working-directory: contracts/ethereum
        run: npx solhint 'contracts/**/*.sol'

  # Build verification
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binaries
        run: make build

      - name: Verify binaries
        shell: bash
        run: |
          ./build/bin/sage-crypto help
          ./build/bin/sage-did help
          ./build/bin/sage-verify help || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: build/bin/
          retention-days: 7

  # Feature verification (88 automated tests from FEATURE_TEST_GUIDE_KR.md)
  feature-verification:
    name: Feature Verification (88 Tests)
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries-ubuntu-latest
          path: build/bin/

      - name: Set binary permissions
        run: chmod +x build/bin/*

      - name: Run feature verification
        run: |
          chmod +x tools/scripts/verify_all_features.sh
          ./tools/scripts/verify_all_features.sh --skip-integration

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: feature-verification-logs
          path: /tmp/sage-test-logs/
          retention-days: 7

      - name: Display verification summary
        if: always()
        run: |
          echo "### Feature Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "/tmp/sage-test-logs/test_all_units.log" ]; then
            echo "✅ Feature verification completed" >> $GITHUB_STEP_SUMMARY
            echo "- 88 automated tests executed" >> $GITHUB_STEP_SUMMARY
            echo "- Blockchain integration tests run separately in integration-test workflow" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Feature verification failed" >> $GITHUB_STEP_SUMMARY
          fi
