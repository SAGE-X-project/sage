name: Security

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # Go security scanning
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.2'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run Gosec Security Scanner
        run: |
          export GOTOOLCHAIN=local
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          echo "Running gosec security scan..."
          # Generate JSON format for detailed output
          gosec -conf .gosec.json -fmt=json -out=gosec-results.json -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
          # Generate SARIF format for GitHub Code Scanning
          gosec -conf .gosec.json -fmt=sarif -out=gosec-results-raw.sarif -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
          # Display text output
          gosec -conf .gosec.json -fmt=text -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
        continue-on-error: true

      - name: Fix SARIF artifact paths
        if: always()
        continue-on-error: true
        run: |
          if [ -f "gosec-results-raw.sarif" ]; then
            echo "Raw SARIF file found, fixing paths..."
            python3 .github/scripts/fix-sarif-paths.py
            if [ -f "gosec-results.sarif" ]; then
              echo "Fixed SARIF file created successfully"
              echo "SARIF file size: $(wc -c < gosec-results.sarif) bytes"
              echo "Number of results: $(jq '.runs[0].results | length' gosec-results.sarif)"
            else
              echo "ERROR: Failed to create fixed SARIF file"
              exit 1
            fi
          else
            echo "ERROR: No raw SARIF file found to fix"
            echo "Available files:"
            ls -la gosec-* || echo "No gosec files found"
            exit 1
          fi

      - name: Display Gosec Results
        if: always()
        run: |
          if [ -f "gosec-results.json" ]; then
            echo "Gosec scan completed"
            echo "Results summary:"
            jq -r '.Stats // "No issues found"' gosec-results.json
            if [ "$(jq '.Issues | length' gosec-results.json)" -gt "0" ]; then
              echo ""
              echo "Security issues found:"
              jq -r '.Issues[] | "[\(.severity)] \(.file):\(.line) - \(.details)"' gosec-results.json
            fi
          else
            echo "No gosec results file generated"
          fi

      - name: Validate SARIF file before upload
        if: always()
        continue-on-error: true
        run: |
          if [ -f "gosec-results.sarif" ]; then
            echo "SARIF file exists"
            echo "File size: $(wc -c < gosec-results.sarif) bytes"
            # Validate JSON structure
            if jq empty gosec-results.sarif 2>/dev/null; then
              echo "SARIF file is valid JSON"
              echo "SARIF version: $(jq -r '.version' gosec-results.sarif)"
              echo "Tool name: $(jq -r '.runs[0].tool.driver.name' gosec-results.sarif)"
              echo "Number of results: $(jq '.runs[0].results | length' gosec-results.sarif)"
            else
              echo "ERROR: SARIF file is not valid JSON"
              exit 1
            fi
          else
            echo "ERROR: SARIF file not found for upload"
            exit 1
          fi

      - name: Upload Gosec results to GitHub Security
        if: always() && hashFiles('gosec-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: gosec-results.sarif

  # Smart contract security
  slither:
    name: Slither Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'

      - name: Install dependencies
        working-directory: contracts/ethereum
        run: npm ci

      - name: Compile contracts for Slither
        working-directory: contracts/ethereum
        run: npx hardhat compile

      - name: Run Slither
        working-directory: contracts/ethereum
        run: |
          pip3 install slither-analyzer
          echo "Running Slither analysis..."
          slither . \
            --config-file .slither.config.json \
            --compile-force-framework hardhat \
            --sarif slither-results.sarif 2>&1 | tee slither-output.log || true

          echo "Slither execution completed"
          if [ -f "slither-results.sarif" ]; then
            echo "SARIF file generated successfully"
            echo "File size: $(wc -c < slither-results.sarif) bytes"
          else
            echo "ERROR: Slither did not generate SARIF file"
            echo "Slither output:"
            cat slither-output.log
            echo "Exit code: ${PIPESTATUS[0]}"
          fi

      - name: Move SARIF file
        run: |
          if [ -f "contracts/ethereum/slither-results.sarif" ]; then
            mv contracts/ethereum/slither-results.sarif slither-results.sarif
            echo "SARIF file found and moved"
          else
            echo "WARNING: No SARIF file generated by Slither"
            if [ -f "contracts/ethereum/slither-output.log" ]; then
              echo "Slither output log:"
              cat contracts/ethereum/slither-output.log
            fi
          fi

      - name: Upload Slither results to GitHub Security
        if: hashFiles('slither-results.sarif') != ''
        continue-on-error: true  # Allow CI to pass if SARIF upload fails
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: slither-results.sarif

  # Secret scanning
  gitleaks:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        run: |
          docker run -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path" --verbose --no-git --exit-code=0 || true

  # License compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.2'
          cache: true

      - name: Install go-licenses v2
        run: |
          export GOTOOLCHAIN=local
          go install github.com/google/go-licenses/v2@latest

      - name: Check Go licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        run: go-licenses check ./...

      - name: Check npm licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        working-directory: contracts/ethereum
        run: |
          npx license-checker --summary
          npx license-checker --failOn "GPL;AGPL"
