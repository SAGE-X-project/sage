name: Security

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go (for Go analysis only)
        if: matrix.language == 'go'
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.2'
          cache: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # Go security scanning
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.2'
          cache: true  # Re-enabled with latest actions/setup-go@v6

      - name: Download dependencies
        run: go mod download

      - name: Run Gosec Security Scanner
        id: gosec_scan
        run: |
          export GOTOOLCHAIN=local
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          echo "::group::Gosec Security Scan"
          echo "Running gosec security scan..."
          # Generate JSON format for detailed output
          gosec -fmt=json -out=gosec-results.json -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
          # Generate SARIF format for GitHub Code Scanning
          gosec -fmt=sarif -out=gosec-results-raw.sarif -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
          # Display text output
          gosec -fmt=text -no-fail -exclude-dir=contracts/ethereum/bindings ./... || true
          echo "::endgroup::"
        continue-on-error: true

      - name: Fix SARIF artifact paths
        id: fix_sarif
        if: always()
        continue-on-error: true
        run: |
          echo "::group::Fix SARIF Paths"
          if [ -f "gosec-results-raw.sarif" ]; then
            echo "✓ Raw SARIF file found, fixing paths..."
            python3 .github/scripts/fix-sarif-paths.py
            if [ -f "gosec-results.sarif" ]; then
              echo "✓ Fixed SARIF file created successfully"
              echo "SARIF file size: $(wc -c < gosec-results.sarif) bytes"
              echo "Number of results: $(cat gosec-results.sarif | jq '.runs[0].results | length')"
            else
              echo "::warning::Failed to create fixed SARIF file"
              exit 1
            fi
          else
            echo "::warning::No raw SARIF file found to fix"
            echo "Available files:"
            ls -la gosec-* || echo "No gosec files found"
            exit 1
          fi
          echo "::endgroup::"

      - name: Display Gosec Results
        if: always()
        run: |
          if [ -f "gosec-results.json" ]; then
            echo "✓ Gosec scan completed"
            echo "Results summary:"
            cat gosec-results.json | jq -r '.Stats // "No issues found"'
            if [ -f "gosec-results.json" ] && [ "$(cat gosec-results.json | jq '.Issues | length')" -gt "0" ]; then
              echo ""
              echo "Security issues found:"
              cat gosec-results.json | jq -r '.Issues[] | "[\(.severity)] \(.file):\(.line) - \(.details)"'
            fi
          else
            echo "No gosec results file generated"
          fi

      - name: Validate SARIF file before upload
        id: validate_sarif
        if: always()
        continue-on-error: true
        run: |
          echo "::group::Validate SARIF"
          if [ -f "gosec-results.sarif" ]; then
            echo "✓ SARIF file exists"
            echo "File size: $(wc -c < gosec-results.sarif) bytes"
            # Validate JSON structure
            if jq empty gosec-results.sarif 2>/dev/null; then
              echo "✓ SARIF file is valid JSON"
              echo "SARIF version: $(cat gosec-results.sarif | jq -r '.version')"
              echo "Tool name: $(cat gosec-results.sarif | jq -r '.runs[0].tool.driver.name')"
              echo "Number of results: $(cat gosec-results.sarif | jq '.runs[0].results | length')"
            else
              echo "::warning::SARIF file is not valid JSON"
              exit 1
            fi
          else
            echo "::warning::SARIF file not found for upload"
            exit 1
          fi
          echo "::endgroup::"

      - name: Upload Gosec results to GitHub Security
        if: always() && hashFiles('gosec-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: gosec-results.sarif

  # Smart contract security
  slither:
    name: Slither Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'

      - name: Install dependencies
        working-directory: contracts/ethereum
        run: npm ci

      - name: Compile contracts for Slither
        working-directory: contracts/ethereum
        run: npx hardhat compile

      - name: Run Slither
        id: slither_scan
        working-directory: contracts/ethereum
        continue-on-error: true
        run: |
          echo "::group::Slither Analysis"
          pip3 install slither-analyzer
          if slither . \
            --config-file .slither.config.json \
            --compile-force-framework hardhat \
            --sarif slither-results.sarif; then
            echo "✓ Slither analysis completed successfully"
          else
            echo "::warning::Slither analysis encountered issues"
            exit 1
          fi
          echo "::endgroup::"

      - name: Move SARIF file
        id: move_sarif
        if: always()
        run: |
          echo "::group::Move SARIF File"
          if [ -f "contracts/ethereum/slither-results.sarif" ]; then
            mv contracts/ethereum/slither-results.sarif slither-results.sarif
            echo "✓ SARIF file found and moved"
            echo "File size: $(wc -c < slither-results.sarif) bytes"
          else
            echo "::warning::No SARIF file generated by Slither"
            echo "This may indicate compilation or configuration issues"
          fi
          echo "::endgroup::"

      - name: Upload Slither results to GitHub Security
        if: hashFiles('slither-results.sarif') != ''
        continue-on-error: true  # Allow CI to pass if SARIF upload fails
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: slither-results.sarif

  # Secret scanning
  gitleaks:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        run: |
          docker run -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path" --verbose --no-git --exit-code=0 || true

  # License compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.2'
          cache: true  # Re-enabled with latest actions/setup-go@v6

      - name: Install go-licenses v2
        run: |
          export GOTOOLCHAIN=local
          go install github.com/google/go-licenses/v2@latest

      - name: Check Go licenses
        id: go_licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        run: |
          echo "::group::Go License Check"
          if ! go-licenses check ./...; then
            echo "::warning::Some Go dependencies have missing or undetectable license information"
            echo "::warning::This does not necessarily indicate a license violation"
            exit 1
          fi
          echo "::endgroup::"

      - name: Report Go license status
        if: always()
        run: |
          if [ "${{ steps.go_licenses.outcome }}" == "failure" ]; then
            echo "⚠️  Go license check found issues (see warnings above)"
          else
            echo "✓ All Go licenses verified"
          fi

      - name: Check npm licenses
        id: npm_licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        working-directory: contracts/ethereum
        run: |
          echo "::group::npm License Check"
          npx license-checker --summary
          if ! npx license-checker --failOn "GPL;AGPL"; then
            echo "::warning::Some npm dependencies may have incompatible licenses"
            exit 1
          fi
          echo "::endgroup::"

      - name: Report npm license status
        if: always()
        working-directory: contracts/ethereum
        run: |
          if [ "${{ steps.npm_licenses.outcome }}" == "failure" ]; then
            echo "⚠️  npm license check found issues (see warnings above)"
          else
            echo "✓ All npm licenses verified"
          fi
