name: Security

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # Go security scanning
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: false  # Disable cache to avoid tar extraction issues

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@v2.21.4
          echo "Running gosec security scan..."
          # Generate JSON format for detailed output
          gosec -fmt=json -out=gosec-results.json -no-fail ./... || true
          # Generate SARIF format for GitHub Code Scanning
          gosec -fmt=sarif -out=gosec-results-raw.sarif -no-fail ./... || true

          # Fix SARIF artifact locations to include full repository paths
          # GitHub Code Scanning requires paths relative to repository root
          if [ -f "gosec-results-raw.sarif" ]; then
            python3 -c '
import json
import sys
import os
import glob

with open("gosec-results-raw.sarif", "r") as f:
    sarif = json.load(f)

# Build a mapping of filename -> full path
file_map = {}
for filepath in glob.glob("**/*.go", recursive=True):
    filename = os.path.basename(filepath)
    file_map[filename] = filepath

# Fix artifact locations in SARIF
for run in sarif.get("runs", []):
    for result in run.get("results", []):
        for location in result.get("locations", []):
            phys_loc = location.get("physicalLocation", {})
            artifact_loc = phys_loc.get("artifactLocation", {})
            uri = artifact_loc.get("uri", "")

            # If uri is just a filename (no path separator), look up full path
            if uri and "/" not in uri and uri in file_map:
                artifact_loc["uri"] = file_map[uri]

with open("gosec-results.sarif", "w") as f:
    json.dump(sarif, f, indent=2)
'
            echo "✓ Fixed SARIF artifact locations"
          fi

          # Display text output
          gosec -fmt=text -no-fail ./... || true
        continue-on-error: true

      - name: Display Gosec Results
        if: always()
        run: |
          if [ -f "gosec-results.json" ]; then
            echo "✓ Gosec scan completed"
            echo "Results summary:"
            cat gosec-results.json | jq -r '.Stats // "No issues found"'
            if [ -f "gosec-results.json" ] && [ "$(cat gosec-results.json | jq '.Issues | length')" -gt "0" ]; then
              echo ""
              echo "Security issues found:"
              cat gosec-results.json | jq -r '.Issues[] | "[\(.severity)] \(.file):\(.line) - \(.details)"'
            fi
          else
            echo "No gosec results file generated"
          fi

      - name: Upload Gosec results to GitHub Security
        if: always()
        continue-on-error: true  # Allow CI to pass if SARIF upload fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          category: gosec

  # Smart contract security
  slither:
    name: Slither Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: contracts/ethereum
        run: npm ci

      - name: Compile contracts for Slither
        working-directory: contracts/ethereum
        run: npx hardhat compile

      - name: Run Slither
        working-directory: contracts/ethereum
        run: |
          pip3 install slither-analyzer
          slither . \
            --compile-force-framework hardhat \
            --filter-paths "node_modules|test" \
            --exclude-dependencies \
            --sarif slither-results.sarif || true

      - name: Move SARIF file
        run: mv contracts/ethereum/slither-results.sarif slither-results.sarif || true

      - name: Upload Slither results to GitHub Security
        continue-on-error: true  # Allow CI to pass if SARIF upload fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: slither-results.sarif

  # Secret scanning
  gitleaks:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        run: |
          docker run -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path" --verbose --no-git --exit-code=0 || true

  # License compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: false  # Disable cache to avoid tar extraction issues

      - name: Check Go licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        uses: google/go-licenses@v1.6.0
        with:
          args: check ./...

      - name: Check npm licenses
        continue-on-error: true  # Allow CI to pass while reporting license issues
        working-directory: contracts/ethereum
        run: |
          npx license-checker --summary
          npx license-checker --failOn "GPL;AGPL"
