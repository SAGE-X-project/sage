"""SageRegistryV2 Python binding"""

from typing import Optional, Dict, Any, List
from web3 import Web3
from .base import ContractBase
import json
import os


class SageRegistryV2(ContractBase):
    """SageRegistryV2 contract interface"""
    
    # Contract bytecode for deployment
    BYTECODE = "0x6080604052346200002657620000146200009a565b604051612c16620000aa8239612c1690f35b600080fd5b620000419062000044906001600160a01b031682565b90565b6001600160a01b031690565b62000041906200002b565b620000419062000050565b906200007a6200004162000096926200005b565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b620000a733600662000066565b56fe6080604052600436101561001257600080fd5b60003560e01c80631ab6f8881461010257806322b7a307146100fd57806324e6c522146100f85780633ae37799146100f357806359b5acf3146100ee578063745e8f81146100e9578063783f054c146100e45780638051d5ea146100df5780638a92792b146100da5780638da5cb5b146100d5578063953909f8146100d0578063a6c2af01146100cb578063b47a9025146100c6578063da7d9d8f146100c15763e45d486d036101075761077a565b610762565b610746565b61071f565b6105d5565b610595565b61056e565b610553565b61052f565b610501565b6104c6565b610488565b610383565b61030e565b6101bf565b600080fd5b6001600160a01b031690565b90565b6001600160a01b0381165b0361010757565b9050359061013a8261011b565b565b90602082820312610107576101189161012d565b9052565b0190565b90610178610171610167845190565b8084529260200190565b9260200190565b9060005b8181106101895750505090565b9091926101a661019f6001928651815260200190565b9460200190565b92910161017c565b602080825261011892910190610158565b34610107576101e66101da6101d536600461013c565b612709565b604051918291826101ae565b0390f35b909182601f83011215610107578135916001600160401b03831161010757602001926001830284011161010757565b9060e0828203126101075781356001600160401b03811161010757816102409184016101ea565b92909360208201356001600160401b03811161010757836102629184016101ea565b92909360408201356001600160401b03811161010757816102849184016101ea565b92909360608201356001600160401b03811161010757836102a69184016101ea565b92909360808201356001600160401b03811161010757816102c89184016101ea565b92909360a08201356001600160401b03811161010757836102ea9184016101ea565b92909360c08201356001600160401b0381116101075761030a92016101ea565b9091565b34610107576101e661033c610324366004610219565b9c9b909b9a919a999299989398979497969596610852565b6040515b9182918290815260200190565b600091031261010757565b610118916008021c6001600160a01b031690565b906101189154610358565b6101186000600861036c565b346101075761039336600461034d565b6101e661039e610377565b604051918291826001600160a01b03909116815260200190565b80610126565b9050359061013a826103b8565b91909160c081840312610107576103e283826103be565b9260208201356001600160401b03811161010757816104029184016101ea565b92909360408201356001600160401b03811161010757836104249184016101ea565b92909360608201356001600160401b03811161010757816104469184016101ea565b92909360808201356001600160401b03811161010757836104689184016101ea565b92909360a08201356001600160401b0381116101075761030a92016101ea565b34610107576104ad61049b3660046103cb565b99989098979197969296959395611a56565b604051005b9060208282031261010757610118916103be565b34610107576104ad6104d93660046104b2565b6124e7565b919060408382031261010757610118906104f881856103be565b9360200161012d565b34610107576101e661051d6105173660046104de565b90612720565b60405191829182901515815260200190565b34610107576104ad61054236600461013c565b6127c3565b6101186000600761036c565b346101075761056336600461034d565b6101e661039e610547565b34610107576101e661051d6105843660046104b2565b612750565b6101186000600661036c565b34610107576105a536600461034d565b6101e661039e610589565b906020828203126101075781356001600160401b0381116101075761030a92016101ea565b34610107576104ad6105e83660046105b0565b90611458565b60005b8381106106015750506000910152565b81810151838201526020016105f1565b61063261063b60209361015493610626815190565b80835293849260200190565b958691016105ee565b601f01601f191690565b9061011890610120806106d16106bf6106ad61069b610689610677610140890160008c01518a820360008c0152610611565b60208b015189820360208b0152610611565b60408a015188820360408a0152610611565b60608901518782036060890152610611565b60808801518682036080880152610611565b60a087015185820360a0870152610611565b60c0808701516001600160a01b031690850152946106f460e082015160e0860152565b610705610100820151610100860152565b01511515910152565b602080825261011892910190610645565b34610107576101e661073a6107353660046104b2565b612663565b6040519182918261070e565b34610107576101e661051d61075c3660046105b0565b906111ef565b34610107576104ad61077536600461013c565b6127ef565b34610107576101e661073a6107903660046105b0565b906126d2565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176107cd57604052565b610796565b9061013a6107df60405190565b92836107ac565b61011860e06107d2565b6001600160401b0381116107cd57602090601f01601f19160190565b90826000939282370152565b9092919261082d610828826107f0565b6107d2565b938185526020850190828401116101075761013a9261080c565b610118913691610818565b9c9a98969492906108658c8e8a8c610d16565b61086d6107e6565b9d8e9161087991610847565b905261088491610847565b60208c015261089291610847565b60408a01526108a091610847565b60608801526108ae91610847565b60808601526108bc91610847565b60a08401526108ca91610847565b60c082015261011890611592565b6101186101186101189290565b61011860206108d8565b61011860416108d8565b1561090057565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207075626c6963206b6579206c656e677468000000000000006044820152606490fd5b0390fd5b634e487b7160e01b600052603260045260246000fd5b919081101561096c570190565b610949565b61098461097e6101189290565b60f81b90565b6001600160f81b03191690565b1561099857565b60405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420636f6d70726573736564206b657920666f726d61740000006044820152606490fd5b156109e457565b60405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420756e636f6d70726573736564206b657920666f726d6174006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b6000198114610a4e5760010190565b610a29565b15610a5a57565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207a65726f206b657960801b6044820152606490fd5b6101189061010c906001600160a01b031682565b61011890610a92565b61011890610aa6565b610150906001600160a01b031660601b90565b92610b14601461015494610b0c60208396610b0c610b07839c9b7529a0a3a29025b2bc902932b3b4b9ba3930ba34b7b71d60511b815260160190565b918252565b018092610ab8565b01918252565b90610154610b076020937f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0190565b15610b5457565b60405162461bcd60e51b815260206004820152601860248201527f4b6579206f776e657273686970206e6f742070726f76656e00000000000000006044820152606490fd5b61010c6101186101189290565b61011890610b99565b15610bb657565b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b905b600052602052604060002090565b6101189081565b6101189054610bff565b15610c1757565b60405162461bcd60e51b815260206004820152601460248201527312d95e481a185cc81899595b881c995d9bdad95960621b6044820152606490fd5b61011860606107d2565b5190565b90600019905b9181191691161790565b90610c7f610118610c869290565b8254610c61565b9055565b90610c7f610118610c86926108d8565b9060ff90610c67565b90610cb3610118610c8692151590565b8254610c9a565b61013a9190610cfc90604090600290610cdb81610cd5875190565b90610c71565b610cf360018201610ced602088015190565b90610c8a565b01920151151590565b90610ca3565b9061013a91610cba565b90610bf190610aaf565b9092919083610d266101186108e5565b85101580611193575b610d38906108f9565b610d4260416108d8565b85149182156110cc57610d94610d73610d65610d5e60006108d8565b858561095f565b356001600160f81b03191690565b610d8e610d806004610971565b916001600160f81b03191690565b146109dd565b610d9e8282610847565b610db0610da9825190565b9160200190565b20946000938490610dc0866108d8565b90806110aa575b156110415750610ddf610dda60016108d8565b90505b885b81101561103057610df4610d6582878761095f565b610e00610d8088610971565b03610e1857610e11610ddf91610a3f565b9050610ddd565b5050859650610e2b600196949596610a53565b4695610e3630610aaf565b3397610e4160405190565b918291888b6020850193610e559385610acb565b908103825203610e6590826107ac565b8051906020012060405180916020820190610e809082610b1a565b908103825203610e9090826107ac565b8051906020012091610ea191610847565b610eaa916128ff565b91610eb491610847565b610ebd906129c2565b906001600160a01b0382166001600160a01b03821614610edc90610b4d565b610ee584610ba6565b6001600160a01b0316906001600160a01b03161415610f0390610baf565b8360049183610f128185610bef565b600101610f1e90610c06565b610f27876108d8565b1095610f7394610f7d97611005575b610f4b6001610f458584610bef565b01610c06565b610f5b610f57846108d8565b9190565b14610fc0575b5050610f7890610f7360059384610d0c565b610c71565b610d0c565b610fae610fa87fdb3f29cf64872daa542625c243dda32c68005c7267a9541527826dd54044a0b19390565b91610aaf565b91610fb860405190565b80805b0390a3565b610ffd92610ff891610ff34394610fea610fd8610c53565b96610fe386848a0152565b6020880152565b15156040860152565b610bef565b610d02565b833880610f61565b61102b611026611022600261101a8786610bef565b015460ff1690565b1590565b610c10565b610f36565b50869750610e2b9096949596610a53565b61104b60216108d8565b891480611066575b15610ddd5750610ddf610e1160016108d8565b50611075610d6582878761095f565b611082610d806002610971565b14806110535750611097610d6582878761095f565b6110a4610d806003610971565b14611053565b506110b9610d6582878761095f565b6110c6610d806004610971565b14610dc7565b6110d660216108d8565b860361113d5761111360006110f7610d656110f0836108d8565b868661095f565b611104610d806002610971565b14908115611118575b50610991565b610d94565b6111299150610d5e610d65916108d8565b611136610d806003610971565b143861110d565b61114760206108d8565b8603610d94575b60405162461bcd60e51b815260206004820152601e60248201527f45643235353139206e6f7420737570706f72746564206f6e2d636861696e00006044820152606490fd5b50610d386111a26101186108ef565b8611159050610d2f565b9061013a6111dd60026111bd610c53565b946111ce6111ca82610c06565b8752565b61101a610fe360018301610c06565b15156040840152565b610118906111ac565b6112086112209261121b92611202600090565b50610847565b611213610da9825190565b206004610bef565b6111e6565b6020810151611232610f5760006108d8565b11908161123d575090565b6040015115905090565b1561124e57565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba1035b2bc9037bbb732b960991b6044820152606490fd5b1561128a57565b60405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481c995d9bdad959608a1b6044820152606490fd5b906112dc6112d0610167845490565b92600052602060002090565b9060005b8181106112ed5750505090565b90919261131161130a60019261130287610c06565b815260200190565b9460010190565b9291016112e0565b90610118916112c1565b9061013a61133d9261133460405190565b93848092611319565b03836107ac565b61011890611323565b90611356825190565b81101561096c576020809102010190565b634e487b7160e01b600052602260045260246000fd5b906001600283049216801561139d575b602083101461139857565b611367565b91607f169161138d565b805460009392916113c46113ba8361137d565b8085529360200190565b916001811690811561141657506001146113dd57505050565b6113f09192939450600052602060002090565b916000925b8184106114025750500190565b8054848401526020909301926001016113f5565b92949550505060ff1916825215156020020190565b90610118916113a7565b9061013a61133d9261144660405190565b9384809261142b565b61011890611435565b9061146291610847565b61146d610da9825190565b203361148c611485611480836005610d0c565b610c06565b8314611247565b60046114a86114a3611022600261101a8786610bef565b611283565b6001906114c18260026114bb8785610bef565b01610ca3565b6114d46114cf846002610d0c565b611344565b90600090836114e2836108d8565b905b611519575b5050505050610fae610fa87f607ba79db6282926774611ed828760d8d8a7d1266ad896b9aaf81f6ba883192c9390565b611524610118855190565b81101561158d578061154f83611549611543610c5d611566968a61134d565b87610bef565b0161144f565b61155a610da9825190565b20881461156c57610a3f565b846114e4565b6115888460096114bb611582610c5d868b61134d565b83610bef565b610a3f565b6114e9565b610118600082016115a98151602085015190611b86565b8051906115d46115bf6080860193845190611c27565b946115ce835185519088611d86565b856121c0565b51905190836122ec565b6101189061010c565b61011890546115de565b156115f857565b60405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b3b2b73a1037bbb732b960891b6044820152606490fd5b9061013a9a99989796959493929161166e6116566006611650846000610bef565b016115e7565b611668335b916001600160a01b031690565b146115f1565b61188b565b1561167a57565b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b156116b657565b60405162461bcd60e51b815260206004820152601060248201526f4167656e74206e6f742061637469766560801b6044820152606490fd5b9091610154908390809361080c565b01916116ee565b916116ee565b8092610ab8565b9160001960089290920291821b911b610c67565b9190611736610118610c86936108d8565b908354611711565b61013a91600091611725565b818110611755575050565b80611763600060019361173e565b0161174a565b9190601f811161177857505050565b61178a61013a93600052602060002090565b906020601f8401819004830193106117ac575b6020601f90910104019061174a565b909150819061179d565b91906001600160401b0382116107cd576117da826117d4855461137d565b85611769565b600090601f831160011461181557610c8692916000918361180a575b5050600019600883021c1916906002021790565b0135905038806117f6565b601f1983169161182a85600052602060002090565b92815b8181106118685750916002939185600196941061184e575b50505002019055565b0135600019601f84166008021c19165b9055388080611845565b9193602060018192878701358155019501920161182d565b9061013a92916117b6565b99828260016119bf8e6119b86119ec9f8f978f916119df9f9e9d9b8f8f9e6119d29f8f93829f6119c59f6119ab968c611978926119b39c6119a599611984986118f06118dd6118d88b8b91565b905090565b6118ea610f5760006108d8565b11611673565b61190e611026611022600261101a61120860046115498c6000610bef565b611926611921600961101a886000610bef565b6116af565b611934611480866003610bef565b9561193e60405190565b9b8c9a60208c019a33988c966117046014999561170a9761170460209f9e9b966020986101549f99896116fd610b149f9a9b6117049c9052565b908103825203826107ac565b61198f610da9825190565b2093600461199e896000610bef565b0193610847565b9161144f565b9033926127f8565b610baf565b6000610bef565b01611880565b60026119bf8b6000610bef565b60036119bf886000610bef565b60056119bf856000610bef565b4290611a058260086119ff846000610bef565b01610c8a565b611a1f611a13826003610bef565b610ced61158882610c06565b7fb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5610fbb611a4c33610aaf565b9361034060405190565b9061013a9a99989796959493929161162f565b15611a7057565b60405162461bcd60e51b815260206004820152600c60248201526b111251081c995c5d5a5c995960a21b6044820152606490fd5b610154611abc92602092611ab6815190565b94859290565b938491016105ee565b610b076101549160209493611aa4565b611aea611ae160405190565b92839283611ac5565b03902090565b61011891611ad5565b15611b0057565b60405162461bcd60e51b815260206004820152601660248201527511125108185b1c9958591e481c9959da5cdd195c995960521b6044820152606490fd5b61011860646108d8565b15611b4f57565b60405162461bcd60e51b815260206004820152600f60248201526e546f6f206d616e79206167656e747360881b6044820152606490fd5b611bde610f57610118611bd8611480610f5795611bd1611bc5610c5d611be49a610118611bb3610c5d8790565b611bbf60009d8e6108d8565b11611a69565b6118ea610f578a6108d8565b6001611af0565b936108d8565b14611af9565b61013a611bf9611bf5336002610d0c565b5490565b611c07610f57610118611b3e565b10611b48565b60209392611c21610b079261015494611aa4565b90611aa4565b90611c48904292611978611c3a60405190565b948593602085019384611c0d565b611c53610da9825190565b2090565b6040808252610118939192611c6e91840190610611565b916020818403910152610611565b602080825261011892910190610611565b801515610126565b9050519061013a82611c8d565b90929192611cb2610828826107f0565b938185526020850190828401116101075761013a926105ee565b9080601f8301121561010757815161011892602001611ca2565b91909160408184031261010757611cfd8382611c95565b9260208201516001600160401b038111610107576101189201611ccc565b611d43610118949293611d3360608401956000850152565b6001600160a01b03166020830152565b6040818403910152610611565b6040513d6000823e3d90fd5b15611d645750565b61094590611d7160405190565b62461bcd60e51b815291829160048301611c7c565b9091611d9260076115e7565b91600092611da561165b61010c86610ba6565b03611db1575b50505050565b611ddd8392611dd195611dc360405190565b968792602084019283611c57565b908103825203856107ac565b33937fe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d82611e0a87610aaf565b91611e1460405190565b80611e1f8682611c7c565b0390a3611e5b83611e3b611e36611e3660076115e7565b610aaf565b92611e66637b319ba191611e4e60405190565b998a978896879560e01b90565b855260048501611d1b565b03925af1908115611eb457611e8492818093611e8d575b5050611d5c565b38808080611dab565b909150611eac92503d8091833e611ea481836107ac565b810190611ce6565b903880611e7d565b611d50565b6101186101406107d2565b90611ecd815190565b906001600160401b0382116107cd57611eea826117d4855461137d565b602090601f8311600114611f2457610c86929160009183611f19575050600019600883021c1916906002021790565b0151905038806117f6565b601f19831691611f3985600052602060002090565b9260005b818110611f7157509160029391856001969410611f5d5750505002019055565b01516000196008601f8516021c191661185e565b91936020600181928787015181550195019201611f3d565b9061013a91611ec4565b90611f9c815190565b906001600160401b0382116107cd57611fb9826117d4855461137d565b602090601f8311600114611fe857610c86929160009183611f19575050600019600883021c1916906002021790565b601f19831691611ffd85600052602060002090565b9260005b81811061202157509160029391856001969410611f5d5750505002019055565b91936020600181928787015181550195019201612001565b9061013a91611f93565b906001600160a01b0390610c67565b90612062610118610c8692610aaf565b8254612043565b90610cfc610120600961013a9461208e60008201612088600088015190565b90611f89565b6120a060018201612088602088015190565b6120b260028201612088604088015190565b6120c460038201612088606088015190565b6120dc600482016120d6608088015190565b90612039565b6120ee6005820161208860a088015190565b61210f6006820161210960c08801516001600160a01b031690565b90612052565b61212160078201610ced60e088015190565b610cf360088201610ced61010088015190565b9061013a91612069565b805482101561096c57612158600191600052602060002090565b91020190600090565b9190611736610118610c869390565b90815491680100000000000000008310156107cd578261219891600161013a9501815561213e565b90612161565b929160206121bb61013a9360408701908782036000890152610611565b940152565b90600081015191602082015181604084015194606085015194608081015160a082015190339742996001976121f3611eb9565b968752602087015260408601526060850152608084015260a08301526001600160a01b03861660c08301526122298760e0840152565b61223587610100840152565b83151561012083015260009161224b8484610bef565b9061225591612134565b0191825161226291611af0565b9061226c91610c71565b81612278846002610d0c565b9061228291612170565b61228d826003610bef565b61229681610c06565b61229f90610a3f565b6122a891610c8a565b517f848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f491926122d590610aaf565b936122df60405190565b918291610fbb918361219e565b6122f660086115e7565b9160009261230961165b61010c86610ba6565b036123145750505050565b6123339361233f9161232560405190565b958692602084019283611c57565b908103825203846107ac565b61234f611e36611e3660086115e7565b9163c847ad353393803b156101075761237691839161236d60405190565b93849260e01b90565b825281838161238a8b8b8b60048501611d1b565b03925af18015611eb4576123ee575b50506123e26123cf6123c97f3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c9390565b93610aaf565b936123d960405190565b91829182611c7c565b0390a338808080611dab565b8161240d92903d10612414575b61240581836107ac565b81019061034d565b3880612399565b503d6123fb565b61013a906124326116566006611650846000610bef565b61247c565b1561243e57565b60405162461bcd60e51b81526020600482015260166024820152754167656e7420616c726561647920696e61637469766560501b6044820152606490fd5b806124b76000612499612494600961101a8685610bef565b612437565b6124a98160096114bb8683610bef565b60086119ff42958693610bef565b3390610fbb611a4c6123c97f529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f19390565b61013a9061241b565b6124f8611eb9565b906060825260208080808080808080808b01606081520160608152016060815201606081520160608152016000815201600081520160008152016000905250565b6101186124f0565b1561254857565b60405162461bcd60e51b815260206004820152600f60248201526e1059d95b9d081b9bdd08199bdd5b99608a1b6044820152606490fd5b9061013a6126506009612590611eb9565b9461259d6111ca82611435565b6125ac610fe360018301611435565b6125c26125bb60028301611435565b6040880152565b6125d86125d160038301611435565b6060880152565b6125ee6125e760048301611435565b6080880152565b6126046125fd60058301611435565b60a0880152565b612623612613600683016115e7565b6001600160a01b031660c0880152565b61263961263260078301610c06565b60e0880152565b61101a61264860088301610c06565b610100880152565b1515610120840152565b6101189061257f565b61269961011891612672612539565b506000610ff36126876007610f458585610bef565b612693610f57846108d8565b11612541565b61265a565b610b079060209493610154936116ee565b9091611aea906126be60405190565b9384938461269e565b9091610118926126af565b6126f061148061011893612699936126e8612539565b5060016126c7565b6000610ff3612701610118836108d8565b831415612541565b6114cf61011891612718606090565b506002610d0c565b61165b61273f600661165061274c94612737600090565b506000610bef565b926001600160a01b031690565b1490565b600961101a61011892612737600090565b1561276857565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b61013a906127b8336127b261165b61010c60066115e7565b14612761565b61013a906007612052565b61013a9061279a565b61013a906127e4336127b261165b61010c60066115e7565b61013a906008612052565b61013a906127cc565b8251612807610f5760406108d8565b148015612869575b61282f575050519050612825610f5760206108d8565b1461114e57600090565b61274c925061165b9161273f9161285861284860405190565b8092611978602083019182610b1a565b612863610da9825190565b206128ff565b508251612879610f5760416108d8565b1461280f565b1561288657565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b6128fb61013a946128f46060949897956128ea608086019a6000870152565b60ff166020850152565b6040830152565b0152565b60209160009182612924612911845190565b61291e610f5760416108d8565b1461287f565b5061294c848301519260606040820151910151851a9361294360405190565b948594856128cb565b838052039060015afa15611eb45760005190565b90612969825190565b81101561096c570160200190565b90610b07610828836107f0565b369037565b9061013a61299f61299984612977565b936107f0565b601f190160208401612984565b91908201809211610a4e57565b610118906108d8565b9081516129d2610f5760416108d8565b1480612bb6575b612b27575080516129ed610f5760216108d8565b149081612ab5575b50612a585760405162461bcd60e51b815260206004820152603060248201527f496e76616c6964207075626c6963206b657920666f726d617420666f7220616460448201526f323932b9b9903232b934bb30ba34b7b760811b6064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f436f6d70726573736564206b657920616464726573732064657269766174696f60448201526e1b881b9bdd081cdd5c1c1bdc9d1959608a1b6064820152608490fd5b60009150612adc612ace612ac8846108d8565b83612960565b516001600160f81b03191690565b612ae9610d806002610971565b14918215612afa575b5050386129f5565b612b12925090612b0c612ace926108d8565b90612960565b612b1f610d806003610971565b143880612af2565b90612b3260406108d8565b90612b3c82612989565b90600093612b49856108d8565b84811015612b8b57612b8690612b74612ace612b6e612b6860016108d8565b846129ac565b86612960565b871a612b808287612960565b53610a3f565b612b49565b509350506101189150612bac612bb191612ba6610da9825190565b206129b9565b610b99565b610aa6565b50612bcd612ace612bc760006108d8565b84612960565b612bda610d806004610971565b146129d956fea26469706673582212203252708d52a3d05c0ebd6e4ef7481e4d8e7e3416845fd35203b91600f3fd4d0c64736f6c63430008130033"
    
    def __init__(self, web3: Web3, address: str, private_key: Optional[str] = None):
        super().__init__(web3, address, private_key=private_key)
    
    def _load_default_abi(self) -> list:
        """Load the default ABI for SageRegistryV2"""
        abi_path = os.path.join(
            os.path.dirname(__file__),
            '..',
            '..',
            'abi',
            'SageRegistryV2.abi.json'
        )
        if os.path.exists(abi_path):
            with open(abi_path, 'r') as f:
                return json.load(f)
        return [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"agentId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"AfterRegisterHook","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"agentId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AgentDeactivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"agentId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"string","name":"did","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AgentRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"agentId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AgentUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"agentId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"BeforeRegisterHook","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"KeyRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"KeyValidated","type":"event"},{"inputs":[],"name":"afterRegisterHook","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"beforeRegisterHook","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentId","type":"bytes32"}],"name":"deactivateAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentId","type":"bytes32"}],"name":"getAgent","outputs":[{"components":[{"internalType":"string","name":"did","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"endpoint","type":"string"},{"internalType":"bytes","name":"publicKey","type":"bytes"},{"internalType":"string","name":"capabilities","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"registeredAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct ISageRegistry.AgentMetadata","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"did","type":"string"}],"name":"getAgentByDID","outputs":[{"components":[{"internalType":"string","name":"did","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"endpoint","type":"string"},{"internalType":"bytes","name":"publicKey","type":"bytes"},{"internalType":"string","name":"capabilities","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"registeredAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct ISageRegistry.AgentMetadata","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getAgentsByOwner","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentId","type":"bytes32"}],"name":"isAgentActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"publicKey","type":"bytes"}],"name":"isKeyValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"did","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"endpoint","type":"string"},{"internalType":"bytes","name":"publicKey","type":"bytes"},{"internalType":"string","name":"capabilities","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"registerAgent","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"publicKey","type":"bytes"}],"name":"revokeKey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"hook","type":"address"}],"name":"setAfterRegisterHook","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"hook","type":"address"}],"name":"setBeforeRegisterHook","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentId","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"endpoint","type":"string"},{"internalType":"string","name":"capabilities","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"updateAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentId","type":"bytes32"},{"internalType":"address","name":"claimedOwner","type":"address"}],"name":"verifyAgentOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]
    
    @classmethod
    def deploy(
        cls,
        web3: Web3,
        private_key: str,
        *constructor_args,
        gas: Optional[int] = None,
        gas_price: Optional[int] = None
    ) -> 'SageRegistryV2':
        """Deploy a new instance of the contract"""
        account = web3.eth.account.from_key(private_key)
        
        # Create contract factory
        contract = web3.eth.contract(
            abi=cls(web3, '0x' + '0' * 40)._load_default_abi(),
            bytecode=cls.BYTECODE
        )
        
        # Build constructor transaction
        tx = contract.constructor(*constructor_args).build_transaction({
            'from': account.address,
            'nonce': web3.eth.get_transaction_count(account.address),
            'gas': gas or 5000000,
            'gasPrice': gas_price or web3.eth.gas_price
        })
        
        # Sign and send
        signed_tx = account.sign_transaction(tx)
        tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
        
        # Wait for receipt
        receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
        
        return cls(web3, receipt.contractAddress, private_key=private_key)

    # Read-only functions
    
    def after_register_hook(self):
        """afterRegisterHook - Read function"""
        return self.call_function('afterRegisterHook')
    
    def before_register_hook(self):
        """beforeRegisterHook - Read function"""
        return self.call_function('beforeRegisterHook')
    
    def get_agent(self, agentId):
        """getAgent - Read function"""
        return self.call_function('getAgent', agentId)
    
    def get_agent_by_d_i_d(self, did):
        """getAgentByDID - Read function"""
        return self.call_function('getAgentByDID', did)
    
    def get_agents_by_owner(self, _owner):
        """getAgentsByOwner - Read function"""
        return self.call_function('getAgentsByOwner', _owner)
    
    def is_agent_active(self, agentId):
        """isAgentActive - Read function"""
        return self.call_function('isAgentActive', agentId)
    
    def is_key_valid(self, publicKey):
        """isKeyValid - Read function"""
        return self.call_function('isKeyValid', publicKey)
    
    def owner(self):
        """owner - Read function"""
        return self.call_function('owner')
    
    def verify_agent_ownership(self, agentId, claimedOwner):
        """verifyAgentOwnership - Read function"""
        return self.call_function('verifyAgentOwnership', agentId, claimedOwner)

    # State-changing functions
    
    def deactivate_agent(self, agentId, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """deactivateAgent - Write function (requires private key)"""
        return self.send_transaction('deactivateAgent', agentId, gas=gas, gas_price=gas_price)
    
    def register_agent(self, did, name, description, endpoint, publicKey, capabilities, signature, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """registerAgent - Write function (requires private key)"""
        return self.send_transaction('registerAgent', did, name, description, endpoint, publicKey, capabilities, signature, gas=gas, gas_price=gas_price)
    
    def revoke_key(self, publicKey, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """revokeKey - Write function (requires private key)"""
        return self.send_transaction('revokeKey', publicKey, gas=gas, gas_price=gas_price)
    
    def set_after_register_hook(self, hook, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """setAfterRegisterHook - Write function (requires private key)"""
        return self.send_transaction('setAfterRegisterHook', hook, gas=gas, gas_price=gas_price)
    
    def set_before_register_hook(self, hook, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """setBeforeRegisterHook - Write function (requires private key)"""
        return self.send_transaction('setBeforeRegisterHook', hook, gas=gas, gas_price=gas_price)
    
    def update_agent(self, agentId, name, description, endpoint, capabilities, signature, gas: Optional[int] = None, gas_price: Optional[int] = None) -> Dict:
        """updateAgent - Write function (requires private key)"""
        return self.send_transaction('updateAgent', agentId, name, description, endpoint, capabilities, signature, gas=gas, gas_price=gas_price)

    # Event functions
    
    def get_after_register_hook_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get AfterRegisterHook events"""
        return self.get_events('AfterRegisterHook', from_block, to_block)
    
    def get_agent_deactivated_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get AgentDeactivated events"""
        return self.get_events('AgentDeactivated', from_block, to_block)
    
    def get_agent_registered_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get AgentRegistered events"""
        return self.get_events('AgentRegistered', from_block, to_block)
    
    def get_agent_updated_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get AgentUpdated events"""
        return self.get_events('AgentUpdated', from_block, to_block)
    
    def get_before_register_hook_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get BeforeRegisterHook events"""
        return self.get_events('BeforeRegisterHook', from_block, to_block)
    
    def get_key_revoked_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get KeyRevoked events"""
        return self.get_events('KeyRevoked', from_block, to_block)
    
    def get_key_validated_events(self, from_block: int = 0, to_block: str = 'latest') -> List[Dict]:
        """Get KeyValidated events"""
        return self.get_events('KeyValidated', from_block, to_block)
