// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registryv4

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISageRegistryV4AgentKey is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4AgentKey struct {
	KeyType      uint8
	KeyData      []byte
	Signature    []byte
	Verified     bool
	RegisteredAt *big.Int
}

// ISageRegistryV4AgentMetadata is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4AgentMetadata struct {
	Did          string
	Name         string
	Description  string
	Endpoint     string
	KeyHashes    [][32]byte
	Capabilities string
	Owner        common.Address
	RegisteredAt *big.Int
	UpdatedAt    *big.Int
	Active       bool
}

// ISageRegistryV4RegistrationParams is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4RegistrationParams struct {
	Did          string
	Name         string
	Description  string
	Endpoint     string
	KeyTypes     []uint8
	KeyData      [][]byte
	Signatures   [][]byte
	Capabilities string
}

// SageRegistryV4MetaData contains all meta data concerning the SageRegistryV4 contract.
var SageRegistryV4MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"AfterRegisterHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"BeforeRegisterHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Ed25519KeyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KeyRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"keyData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterRegisterHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"approveEd25519Key\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeRegisterHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"deactivateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"getAgent\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structISageRegistryV4.AgentMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"getAgentByDID\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structISageRegistryV4.AgentMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"getAgentKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getAgentsByOwner\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"components\":[{\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"keyData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"internalType\":\"structISageRegistryV4.AgentKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"isAgentActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"enumISageRegistryV4.KeyType[]\",\"name\":\"keyTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keyData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"}],\"internalType\":\"structISageRegistryV4.RegistrationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"revokeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setAfterRegisterHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setBeforeRegisterHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimedOwner\",\"type\":\"address\"}],\"name\":\"verifyAgentOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523462000044576200001462000049565b604051613304620000a98239608051818181610171015281816114a9015281816120b80152612131015261330490f35b600080fd5b6200005362000090565b33608052565b6200006962000069620000699290565b90565b62000069600162000059565b9062000069620000696200008c9262000059565b9055565b620000a66200009e6200006c565b600062000078565b56fe6080604052600436101561001257600080fd5b60003560e01c8063117803e31461013257806312aaac701461012d5780631a9cb151146101285780631ab6f8881461012357806324e6c5221461011e5780633a17bf0f146101195780633ae377991461011457806359b5acf31461010f5780636d45ada51461010a578063745e8f8114610105578063783f054c146101005780638051d5ea146100fb5780638a92792b146100f6578063a6c2af01146100f1578063b08f5664146100ec578063d21a4764146100e7578063da7d9d8f146100e25763e45d486d0361013757610894565b610857565b61083c565b610824565b6107fd565b610708565b6106ed565b6106c9565b61069b565b610656565b6105c3565b61059e565b610482565b610433565b6103e1565b61032c565b6102e2565b61015c565b600080fd5b600091031261013757565b6001600160a01b031690565b90565b9052565b565b346101375761016c36600461013c565b6101ab7f00000000000000000000000000000000000000000000000000000000000000005b604051918291826001600160a01b03909116815260200190565b0390f35b805b0361013757565b9050359061015a826101af565b9060208282031261013757610153916101b8565b634e487b7160e01b600052602160045260246000fd5b600311156101f957565b6101d9565b9061015a826101ef565b610153906101fe565b61015690610208565b60005b83811061022d5750506000910152565b818101518382015260200161021d565b61025e61026760209361027193610252815190565b80835293849260200190565b9586910161021a565b601f01601f191690565b0190565b90610153906080806102bd6102ab60a0850161029960008901516000880190610211565b6020880151868203602088015261023d565b6040870151858203604087015261023d565b606080870151151590850152940151910152565b602080825261015392910190610275565b34610137576101ab6102fd6102f83660046101c5565b611fe6565b604051918291826102d1565b9190604083820312610137576101539061032381856101b8565b936020016101b8565b346101375761034561033f366004610309565b90611451565b604051005b6001600160a01b0381166101b1565b9050359061015a8261034a565b906020828203126101375761015391610359565b9061039a610393610389845190565b8084529260200190565b9260200190565b9060005b8181106103ab5750505090565b9091926103c86103c16001928651815260200190565b9460200190565b92910161039e565b60208082526101539291019061037a565b34610137576101ab6103fc6103f7366004610366565b612046565b604051918291826103d0565b610153916008021c6001600160a01b031690565b906101539154610408565b6101536000600761041c565b346101375761044336600461013c565b6101ab610191610427565b90816101009103126101375790565b906020828203126101375781356001600160401b03811161013757610153920161044e565b34610137576101ab61049d61049836600461045d565b610f31565b6040515b9182918290815260200190565b909182601f83011215610137578135916001600160401b03831161013757602001926001830284011161013757565b91909160c081840312610137576104f483826101b8565b9260208201356001600160401b03811161013757816105149184016104ae565b92909360408201356001600160401b03811161013757836105369184016104ae565b92909360608201356001600160401b03811161013757816105589184016104ae565b92909360808201356001600160401b038111610137578361057a9184016104ae565b92909360a08201356001600160401b0381116101375761059a92016104ae565b9091565b34610137576103456105b13660046104dd565b99989098979197969296959395611b7f565b34610137576103456105d63660046101c5565b611c65565b6003111561013757565b9050359061015a826105db565b91906080838203126101375761060881846101b8565b9261061682602083016105e5565b9260408201356001600160401b03811161013757836106369184016104ae565b92909360608201356001600160401b0381116101375761059a92016104ae565b34610137576101ab61049d61066c3660046105f2565b949390939291926112ba565b9190604083820312610137576101539061069281856101b8565b93602001610359565b34610137576101ab6106b76106b1366004610678565b90612062565b60405191829182901515815260200190565b34610137576103456106dc366004610366565b612113565b6101536000600661041c565b34610137576106fd36600461013c565b6101ab6101916106e1565b34610137576101ab6106b761071e3660046101c5565b612092565b9061015390610120806107af61079d61078b610779610767610755610140890160008c01518a820360008c015261023d565b60208b015189820360208b015261023d565b60408a015188820360408a015261023d565b6060890151878203606089015261023d565b6080880151868203608088015261037a565b60a087015185820360a087015261023d565b60c0808701516001600160a01b031690850152946107d260e082015160e0860152565b6107e3610100820151610100860152565b01511515910152565b602080825261015392910190610723565b34610137576101ab6108186108133660046101c5565b611e74565b604051918291826107ec565b34610137576103456108373660046101c5565b6115b8565b34610137576101ab6103fc6108523660046101c5565b612025565b346101375761034561086a366004610366565b612161565b906020828203126101375781356001600160401b0381116101375761059a92016104ae565b34610137576101ab6108186108aa36600461086f565b90611ef9565b906108c2916108bd610fce565b610c45565b9061015a611000565b903590601e19368290030182121561013757018035906001600160401b0382116101375760200191602082023603831361013757565b1561090857565b60405162461bcd60e51b815260206004820152601a60248201527f4b657920617272617973206c656e677468206d69736d617463680000000000006044820152606490fd5b0390fd5b1561095857565b60405162461bcd60e51b81528061094d600482016020808252818101527f5369676e617475726520617272617973206c656e677468206d69736d61746368604082015260600190565b6101536101536101539290565b610153600a6109a1565b156109bf57565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081ad95e4818dbdd5b9d607a1b6044820152606490fd5b903590601e19368290030182121561013757018035906001600160401b038211610137576020019136829003831361013757565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117610a6357604052565b610a2c565b9061015a610a7560405190565b9283610a42565b6001600160401b038111610a6357602090601f01601f19160190565b90826000939282370152565b90929192610ab9610ab482610a7c565b610a68565b938185526020850190828401116101375761015a92610a98565b610153913691610aa4565b634e487b7160e01b600052603260045260246000fd5b90821015610b0b57602061059a92028101906109f8565b610ade565b6001600160401b038111610a635760208091020190565b9080601f830112156101375781602061015393359101610aa4565b929190610b51610ab482610b10565b93818552602080860192028101918383116101375781905b838210610b77575050505050565b81356001600160401b03811161013757602091610b978784938701610b27565b815201910190610b69565b610153913691610b42565b90610bba610ab483610b10565b918252565b369037565b9061015a610bda610bd484610bad565b93610b10565b601f190160208401610bbf565b634e487b7160e01b600052601160045260246000fd5b6000198114610c0c5760010190565b610be7565b9190811015610b0b576020020190565b35610153816105db565b90610c34825190565b811015610b0b576020809102010190565b509060808201610c5d610c5882856108cb565b905090565b92610c8360a0820194610c7d610c79610153610c5889876108cb565b9190565b14610901565b610c90610c5883836108cb565b93610cb260c0830195610cac610c79610153610c588a886108cb565b14610951565b610cbf610c5884846108cb565b94600095610ccf610c79886109a1565b1180610f09575b610cdf906109b8565b85830193610ced85856109f8565b602086019791610cfd89886109f8565b92610d089192610ad3565b91610d1291610ad3565b610d1b91612281565b610d2586866109f8565b90610d3086886108cb565b610d398c6109a1565b90610d4392610af4565b92610d4e9192610ad3565b91610d5891610ad3565b610d6191612337565b95610d6c81876109f8565b90610d7787896108cb565b92610d829192610ad3565b91610d8c91610ba2565b610d969189613077565b610da083876108cb565b610daa9150610bc4565b98610db4906109a1565b610dc4610153610c58868a6108cb565b811015610e4c5780610e428b610e3f83610e398d8d8d610e338e610e2d8f88610e17610e479f80610e17610e10610e0b610e1d94610e05610e25998f6108cb565b90610c11565b610c21565b998b6108cb565b90610af4565b9590986108cb565b929095610ad3565b93610ad3565b926125e3565b92610c2b565b52565b610bfd565b610db4565b50610f02949350610efc9250610eec90610ee6610ef4939a896101539a9b8a610ee0610e84610e7b88846109f8565b919094846109f8565b929091610eda610ec0610ed4610ece610ea060408a018a6109f8565b919098610ec8610eb360608d018d6109f8565b96909c60e08101906109f8565b98909d610ad3565b98610ad3565b97610ad3565b96610ad3565b95610ad3565b94612dc5565b866109f8565b9390956108cb565b929094610ad3565b92610ba2565b90836131a5565b50610cdf610f1a610c5886866108cb565b610f28610c796101536109ae565b11159050610cd6565b6101539060006108b0565b6101539081565b6101539054610f3c565b61015360026109a1565b15610f5e57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b90600019905b9181191691161790565b90610fc3610153610fca926109a1565b8254610fa3565b9055565b61015a610fdb6000610f43565b610fef610fe6610f4d565b91821415610f57565b6000610fb3565b61015360016109a1565b61015a610fef610ff6565b905b600052602052604060002090565b61015390610147565b610153905461101b565b1561103557565b60405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b3b2b73a1037bbb732b960891b6044820152606490fd5b906101539695949392916110a761108f600661108985600161100b565b01611024565b6110a1335b916001600160a01b031690565b1461102e565b6111bd565b156110b357565b60405162461bcd60e51b815260206004820152601060248201526f4167656e74206e6f742061637469766560801b6044820152606490fd5b156110f257565b60405162461bcd60e51b815260206004820152600d60248201526c546f6f206d616e79206b65797360981b6044820152606490fd5b8054821015610b0b57611141600191600052602060002090565b91020190600090565b9160001960089290920291821b911b610fa9565b919061116d610153610fca9390565b90835461114a565b90815491600160401b831015610a63578261119891600161015a95018155611127565b9061115e565b91602061015a9294936111b960408201966000830190610211565b0152565b509460019491939092906111d1878761100b565b6009015460ff166111e1906110ac565b6111eb878761100b565b600401546111f76109ae565b11611201906110eb565b61120a91610ad3565b9161121491610ad3565b61121f9183866125e3565b928361122b828561100b565b6004019061123891611175565b80429384916112469161100b565b6008019061125391610fb3565b61125e81600561100b565b61126781610f43565b61127090610bfd565b61127991610fb3565b7f11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13909184936112a760405190565b9182916112b4918361119e565b0390a390565b610153959493929190600061106c565b9061015a916112e261108f600661108984600161100b565b611388565b156112ee57565b60405162461bcd60e51b815260206004820152600d60248201526c12d95e481b9bdd08199bdd5b99609a1b6044820152606490fd5b1561132a57565b60405162461bcd60e51b815260206004820152601660248201527543616e6e6f74207265766f6b65206c617374206b657960501b6044820152606490fd5b9060ff90610fa9565b90611381610153610fca92151590565b8254611368565b908161141060026113fc6113a760046113a1878561100b565b01610f43565b6113bf6000916113b9610c79846109a1565b116112e7565b60036113f6876001956113f16113df60046113da8c8b61100b565b015490565b6113eb610c798a6109a1565b11611323565b61100b565b01611371565b600861140a4296879361100b565b01610fb3565b61144c61144261143e7f209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f9390565b9390565b936104a160405190565b0390a3565b9061015a916112ca565b1561146257565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b61015a906114d4336114ce6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611094565b1461145b565b611517565b156114e057565b60405162461bcd60e51b815260206004820152600f60248201526e4e6f742045643235353139206b657960881b6044820152606490fd5b61157c600261156e61152e60046113a1868561100b565b6115406000916113b9610c79846109a1565b61156861156261155c83611554898861100b565b015460ff1690565b926101fe565b916101fe565b146114d9565b60036113f68460019361100b565b42906115b36115a97fd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad9290565b926104a160405190565b0390a2565b61015a90611494565b9061015a9a9998979695949392916115e261108f600661108984600161100b565b6119bb565b156115ee57565b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b1561162a57565b60405162461bcd60e51b81526020600482015260156024820152744e6f207665726966696564204543445341206b657960581b6044820152606490fd5b91906102678161167e816102719560209181520190565b8095610a98565b966116d160c099956116ed9761015a9d9f9e9c966111b99a956116c3916116df988e6116b660e08201946000830152565b6020818503910152611667565b918b830360408d0152611667565b9188830360608a0152611667565b918583036080870152611667565b6001600160a01b0390971660a0830152565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611735575b602083101461173057565b6116ff565b91607f1691611725565b8054600093929161175c61175283611715565b8085529360200190565b91600181169081156117ae575060011461177557505050565b6117889192939450600052602060002090565b916000925b81841061179a5750500190565b80548484015260209093019260010161178d565b92949550505060ff1916825215156020020190565b906101539161173f565b9061015a6117e7926117de60405190565b938480926117c3565b0383610a42565b610153906117cd565b156117fe57565b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b919061116d610153610fca936109a1565b61015a91600091611837565b81811061185f575050565b8061186d6000600193611848565b01611854565b9190601f811161188257505050565b61189461015a93600052602060002090565b906020601f8401819004830193106118b6575b6020601f909101040190611854565b90915081906118a7565b91906001600160401b038211610a63576118e4826118de8554611715565b85611873565b600090601f831160011461191f57610fca929160009183611914575b5050600019600883021c1916906002021790565b013590503880611900565b601f1983169161193485600052602060002090565b92815b81811061197257509160029391856001969410611958575b50505002019055565b0135600019601f84166008021c19165b905538808061194f565b91936020600181928787013581550195019201611937565b9061015a92916118c0565b61015390610147906001600160a01b031682565b61015390611995565b610153906119a9565b999887998585858e8a878f8e9b9d9f9a999a6119d885600161100b565b6009015460ff166119e8906110ac565b60009c866119f58f6109a1565b106119ff906115e7565b611a0886612a74565b611a12819f6109a1565b1415611a1d90611623565b611a2886600561100b565b611a3190610f43565b94611a3b60405190565b998a9960208b01993397611a4f9a8c611685565b908103825203611a5f9082610a42565b8051906020012091600295611a74908761100b565b60010191611a8191610ad3565b90611a8b906117ee565b3391611a969361294b565b611a9f906117f7565b611aaa8a600161100b565b60010191611ab79261198a565b611ac288600161100b565b0191611acd9261198a565b611ad885600161100b565b60030191611ae59261198a565b611af083600161100b565b60050191611afd9261198a565b429081611b0b82600161100b565b60080190611b1891610fb3565b611b2381600561100b565b611b2c81610f43565b611b3590610bfd565b611b3e91610fb3565b7fb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5611b68336119b2565b92611b7260405190565b908152806020810161144c565b9061015a9a9998979695949392916115c1565b61015a90611ba961108f600661108984600161100b565b611bf3565b15611bb557565b60405162461bcd60e51b81526020600482015260166024820152754167656e7420616c726561647920696e61637469766560501b6044820152606490fd5b80611c2f6001611c10611c0b6009611554868561100b565b611bae565b611c21600060096113f6868561100b565b600861140a4295869361100b565b339061144c611442611c5f7f529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f19390565b936119b2565b61015a90611b92565b610153610140610a68565b611c81611c6e565b906060825260208080808080808080808b0160608152016060815201606081520160608152016060815201600081520160005b81520160008152016000905250565b610153611c79565b15611cd257565b60405162461bcd60e51b815260206004820152600f60248201526e1059d95b9d081b9bdd08199bdd5b99608a1b6044820152606490fd5b90611d24611d18610389845490565b92600052602060002090565b9060005b818110611d355750505090565b909192611d59611d52600192611d4a87610f43565b815260200190565b9460010190565b929101611d28565b9061015391611d09565b9061015a6117e792611d7c60405190565b93848092611d61565b9061015a611e616009611d96611c6e565b94611da7611da3826117cd565b8752565b611dbd611db6600183016117cd565b6020880152565b611dd3611dcc600283016117cd565b6040880152565b611de9611de2600383016117cd565b6060880152565b611dff611df860048301611d6b565b6080880152565b611e15611e0e600583016117cd565b60a0880152565b611e34611e2460068301611024565b6001600160a01b031660c0880152565b611e4a611e4360078301610f43565b60e0880152565b611554611e5960088301610f43565b610100880152565b1515610120840152565b61015390611d85565b611eab61015391611e83611cc3565b5060016113f1611e9860076113a1858561100b565b611ea5610c7960006109a1565b11611ccb565b611e6b565b90916102719083908093610a98565b610bba906020949361027193611eb0565b9091611ee890611edf60405190565b93849384611ebf565b03902090565b909161015392611ed0565b611f1c611f1761015393611eab93611f0f611cc3565b506003611eee565b610f43565b611f34611f2c61015360006109a1565b821415611ccb565b600161100b565b61015360a0610a68565b611f4d611f3b565b9060008252602080808080860160608152016060611cb4565b610153611f45565b90610156906101fe565b9061015a611fd66004611f89611f3b565b94611f9e611f98825460ff1690565b87611f6e565b611fad611db6600183016117cd565b611fbc611dcc600283016117cd565b6113a1611fcd600383015460ff1690565b15156060880152565b6080840152565b61015390611f78565b61201761015391611ff5611f66565b5060026113f161200a60046113a1858561100b565b6113b9610c7960006109a1565b611fdd565b61015390611d6b565b600461203661015392611e83606090565b0161201c565b9061100d906119b2565b61205d61015391612055606090565b50600461203c565b61201c565b611094612081600661108961208e94612079600090565b50600161100b565b926001600160a01b031690565b1490565b600961155461015392612079600090565b61015a906120dd336114ce6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611094565b612108565b906001600160a01b0390610fa9565b90612101610153610fca926119b2565b82546120e2565b61015a9060066120f1565b61015a906120a3565b61015a90612156336114ce6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611094565b61015a9060076120f1565b61015a9061211c565b1561217157565b60405162461bcd60e51b815260206004820152600c60248201526b111251081c995c5d5a5c995960a21b6044820152606490fd5b6102716121bd926020926121b7815190565b94859290565b9384910161021a565b610bba61027191602094936121a5565b611ee86121e260405190565b928392836121c6565b610153916121d6565b156121fb57565b60405162461bcd60e51b815260206004820152601660248201527511125108185b1c9958591e481c9959da5cdd195c995960521b6044820152606490fd5b61015360646109a1565b1561224a57565b60405162461bcd60e51b815260206004820152600f60248201526e546f6f206d616e79206167656e747360881b6044820152606490fd5b6122e3610c796101536122dd611f17610c79956122d66122c46122ae6122e99a6101536122b26122ae8790565b5190565b6122be60009d8e6109a1565b1161216a565b6122d0610c798a6109a1565b116115e7565b60036121eb565b936109a1565b146121f4565b61015a6122fe6122fa33600461203c565b5490565b61230c610c79610153612239565b10612243565b60408082526101539391926123299184019061023d565b91602081840391015261023d565b6123509161235c91604051938492602084019283612312565b90810382520382610a42565b61236e612367825190565b9160200190565b2090565b61239461015394929361238a60608401956000850152565b6020830190610211565b604081840391015261023d565b156123a857565b60405162461bcd60e51b815260206004820152601660248201527512d95e48185b1c9958591e481c9959da5cdd195c995960521b6044820152606490fd5b6111b961241260609361015a9698979561240560808601926000870152565b848203602086015261023d565b6001600160a01b039097166040830152565b1561242b57565b60405162461bcd60e51b815260206004820152602360248201527f4543445341207369676e617475726520766572696669636174696f6e206661696044820152621b195960ea1b6064820152608490fd5b61015390516101fe565b90611381610153610fca92610208565b9061249f815190565b906001600160401b038211610a63576124bc826118de8554611715565b602090601f83116001146124f657610fca9291600091836124eb575050600019600883021c1916906002021790565b015190503880611900565b601f1983169161250b85600052602060002090565b9260005b8181106125435750916002939185600196941061252f5750505002019055565b01516000196008601f8516021c1916611968565b9193602060018192878701518155019501920161250f565b9061015a91612496565b61015a91906125d390608090600490612587816125818761247c565b90612486565b61259f60018201612599602088015190565b9061255b565b6125b160028201612599604088015190565b6125cb600382016125c56060880151151590565b90611371565b0192016122ae565b90610fb3565b9061015a91612565565b610153926126f4916113f16126ed96946125fb600090565b506126068482612838565b60405161261d816020810161235088868984612372565b612628612367825190565b2097889460029461263e60046113a1898961100b565b9861265760009a612651610c798d6109a1565b146123a1565b896001612663816101fe565b61266c886101fe565b036126f95750506126e66126c0611fcd9385846123506126af3394612695611f1782600561100b565b9061269f60405190565b93849288886020860194856123e6565b6126ba612367825190565b2061294b565b936126ca85612424565b6126df42976126d7611f3b565b9d8e01611f6e565b60208c0152565b60408a0152565b6080860152565b6125d9565b909250612705886101fe565b61270e876101fe565b14612722575b506126e6611fcd92936126ca565b91506126e6612714565b61015360206109a1565b1561273d57565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420583235353139206b6579206c656e677468000000000000006044820152606490fd5b61015360406109a1565b61015360416109a1565b61015360216109a1565b156127a757565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204543445341206b6579206c656e67746800000000000000006044820152606490fd5b156127f357565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642045643235353139206b6579206c656e6774680000000000006044820152606490fd5b61284260006101fe565b61284b826101fe565b0361286a57505161015a90612864610c7961015361272c565b146127ec565b61287460016101fe565b61287d826101fe565b036128ea57508061288f61015a925190565b61289d610c79610153612782565b149081156128cb575b81156128b3575b506127a0565b5190506128c4610c79610153612796565b14386128ad565b90506128d5815190565b6128e3610c7961015361278c565b14906128a6565b6128f761156260026101fe565b146128ff5750565b5161015a90612912610c7961015361272c565b14612736565b90610271610bba6020937f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0190565b61208e9250611094916120819161297461296460405190565b8092612350602083019182612918565b61297f612367825190565b20612a0d565b1561298c57565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b6111b961015a946129fa6060949897956129f0608086019a6000870152565b60ff166020850152565b6040830152565b6040513d6000823e3d90fd5b60209160009182612a33612a1f845190565b612a2d610c7961015361278c565b14612985565b50612a5b848301519260606040820151910151851a93612a5260405190565b948594856129d1565b838052039060015afa15612a6f5760005190565b612a01565b612a8560046120366001938461100b565b60009082612a92836109a1565b905b612aa5575b505061015391506109a1565b612ab0610153835190565b811015612b2957612ad76120176002612ad1612acc8587610c2b565b6122ae565b9061100b565b612ae284820161247c565b612aee611562876101fe565b149081612b1b575b50612b0b57612b058491610bfd565b90612a94565b906101539350612acc9250610c2b565b606001511515905038612af6565b612a99565b90612b37815190565b906001600160401b038211610a6357612b54826118de8554611715565b602090601f8311600114612b8357610fca9291600091836124eb575050600019600883021c1916906002021790565b601f19831691612b9885600052602060002090565b9260005b818110612bbc5750916002939185600196941061252f5750505002019055565b91936020600181928787015181550195019201612b9c565b9061015a91612b2e565b61015a9160009161115e565b818110612bf5575050565b80612c036000600193612bde565b01612bea565b9091828110612c1757505050565b61015a9290612c2590611d18565b9081019101612bea565b90600160401b8111610a635781612c4761015a935490565b90828155612c09565b8151916001600160401b038311610a6357612c7a611d18600192612c748686612c2f565b60200190565b92049160005b838110612c8d5750505050565b6001906020612c9e610153866122ae565b9401938184015501612c80565b9061015a91612c50565b906125c5610120600961015a94612cda60008201612cd4600088015190565b90612bd4565b612cec60018201612cd4602088015190565b612cfe60028201612cd4604088015190565b612d1060038201612cd4606088015190565b612d2860048201612d22608088015190565b90612cab565b612d3a60058201612cd460a088015190565b612d5b60068201612d5560c08801516001600160a01b031690565b906120f1565b612d6e600782016125d360e088016122ae565b612d82600882016125d361010088016122ae565b01920151151590565b9061015a91612cb5565b90610fc3610153610fca9290565b92916020612dc061015a936040870190878203600089015261023d565b940152565b429633969195929460019390612dd9611c6e565b87815295602087015260408601526060850152608084015260a0830152612e0c8560c08401906001600160a01b03169052565b612e178660e0840152565b612e2386610100840152565b80151561012083015283612e369161100b565b90612e4091612d8b565b81612e4c8260036121eb565b90612e5691612d95565b81612e6284600461203c565b90612e6c91611175565b612e7782600561100b565b612e8081610f43565b612e8990610bfd565b612e9291610fb3565b7f848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f49192612ebe906119b2565b93612ec860405190565b91829161144c9183612da3565b6101476101536101539290565b61015390612ed5565b906101539161023d565b90612f0b612f01835190565b8083529160200190565b9081612f1d6020830284019460200190565b926000915b838310612f3157505050505090565b90919293946020612f54612f4d83856001950387528951612eeb565b9760200190565b9301930191939290612f22565b6040808252610153939192612f789184019061023d565b916020818403910152612ef5565b60208082526101539291019061023d565b8015156101b1565b9050519061015a82612f97565b90929192612fbc610ab482610a7c565b938185526020850190828401116101375761015a9261021a565b9080601f8301121561013757815161015392602001612fac565b919091604081840312610137576130078382612f9f565b9260208201516001600160401b038111610137576101539201612fd6565b61239461015394929361303d60608401956000850152565b6001600160a01b03166020830152565b156130555750565b61094d9061306260405190565b62461bcd60e51b815291829160048301612f86565b90916130836006611024565b9160009261309661109461014786612ee2565b036130a2575b50505050565b6130ce83926130c2956130b460405190565b968792602084019283612f61565b90810382520385610a42565b33937fe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d826130fb876119b2565b9161310560405190565b806131108682612f86565b0390a361314c8361312c6131276131276006611024565b6119b2565b92613157637b319ba19161313f60405190565b998a978896879560e01b90565b855260048501613025565b03925af1908115612a6f576131759281809361317e575b505061304d565b3880808061309c565b90915061319d92503d8091833e6131958183610a42565b810190612ff0565b90388061316e565b6131af6007611024565b916000926131c261109461014786612ee2565b036131cd5750505050565b6131ec936131f8916131de60405190565b958692602084019283612f61565b90810382520384610a42565b6132086131276131276007611024565b9163c847ad353393803b156101375761322f91839161322660405190565b93849260e01b90565b82528183816132438b8b8b60048501613025565b03925af18015612a6f576132a1575b5050613295613282611c5f7f3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c9390565b9361328c60405190565b91829182612f86565b0390a33880808061309c565b816132c092903d106132c7575b6132b88183610a42565b81019061013c565b3880613252565b503d6132ae56fea2646970667358221220fa47609bcca876fb41c89bde31b70eb094d9d55d8502519607335ef5ada7b12664736f6c63430008130033",
}

// SageRegistryV4ABI is the input ABI used to generate the binding from.
// Deprecated: Use SageRegistryV4MetaData.ABI instead.
var SageRegistryV4ABI = SageRegistryV4MetaData.ABI

// SageRegistryV4Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SageRegistryV4MetaData.Bin instead.
var SageRegistryV4Bin = SageRegistryV4MetaData.Bin

// DeploySageRegistryV4 deploys a new Ethereum contract, binding an instance of SageRegistryV4 to it.
func DeploySageRegistryV4(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SageRegistryV4, error) {
	parsed, err := SageRegistryV4MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SageRegistryV4Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SageRegistryV4{SageRegistryV4Caller: SageRegistryV4Caller{contract: contract}, SageRegistryV4Transactor: SageRegistryV4Transactor{contract: contract}, SageRegistryV4Filterer: SageRegistryV4Filterer{contract: contract}}, nil
}

// SageRegistryV4 is an auto generated Go binding around an Ethereum contract.
type SageRegistryV4 struct {
	SageRegistryV4Caller     // Read-only binding to the contract
	SageRegistryV4Transactor // Write-only binding to the contract
	SageRegistryV4Filterer   // Log filterer for contract events
}

// SageRegistryV4Caller is an auto generated read-only Go binding around an Ethereum contract.
type SageRegistryV4Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SageRegistryV4Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SageRegistryV4Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SageRegistryV4Session struct {
	Contract     *SageRegistryV4   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SageRegistryV4CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SageRegistryV4CallerSession struct {
	Contract *SageRegistryV4Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SageRegistryV4TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SageRegistryV4TransactorSession struct {
	Contract     *SageRegistryV4Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SageRegistryV4Raw is an auto generated low-level Go binding around an Ethereum contract.
type SageRegistryV4Raw struct {
	Contract *SageRegistryV4 // Generic contract binding to access the raw methods on
}

// SageRegistryV4CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SageRegistryV4CallerRaw struct {
	Contract *SageRegistryV4Caller // Generic read-only contract binding to access the raw methods on
}

// SageRegistryV4TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SageRegistryV4TransactorRaw struct {
	Contract *SageRegistryV4Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSageRegistryV4 creates a new instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4(address common.Address, backend bind.ContractBackend) (*SageRegistryV4, error) {
	contract, err := bindSageRegistryV4(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4{SageRegistryV4Caller: SageRegistryV4Caller{contract: contract}, SageRegistryV4Transactor: SageRegistryV4Transactor{contract: contract}, SageRegistryV4Filterer: SageRegistryV4Filterer{contract: contract}}, nil
}

// NewSageRegistryV4Caller creates a new read-only instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Caller(address common.Address, caller bind.ContractCaller) (*SageRegistryV4Caller, error) {
	contract, err := bindSageRegistryV4(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Caller{contract: contract}, nil
}

// NewSageRegistryV4Transactor creates a new write-only instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Transactor(address common.Address, transactor bind.ContractTransactor) (*SageRegistryV4Transactor, error) {
	contract, err := bindSageRegistryV4(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Transactor{contract: contract}, nil
}

// NewSageRegistryV4Filterer creates a new log filterer instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Filterer(address common.Address, filterer bind.ContractFilterer) (*SageRegistryV4Filterer, error) {
	contract, err := bindSageRegistryV4(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Filterer{contract: contract}, nil
}

// bindSageRegistryV4 binds a generic wrapper to an already deployed contract.
func bindSageRegistryV4(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SageRegistryV4MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SageRegistryV4 *SageRegistryV4Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SageRegistryV4.Contract.SageRegistryV4Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SageRegistryV4 *SageRegistryV4Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SageRegistryV4Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SageRegistryV4 *SageRegistryV4Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SageRegistryV4Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SageRegistryV4 *SageRegistryV4CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SageRegistryV4.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SageRegistryV4 *SageRegistryV4TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SageRegistryV4 *SageRegistryV4TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.contract.Transact(opts, method, params...)
}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) OWNER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "OWNER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) OWNER() (common.Address, error) {
	return _SageRegistryV4.Contract.OWNER(&_SageRegistryV4.CallOpts)
}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) OWNER() (common.Address, error) {
	return _SageRegistryV4.Contract.OWNER(&_SageRegistryV4.CallOpts)
}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) AfterRegisterHook(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "afterRegisterHook")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) AfterRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.AfterRegisterHook(&_SageRegistryV4.CallOpts)
}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) AfterRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.AfterRegisterHook(&_SageRegistryV4.CallOpts)
}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) BeforeRegisterHook(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "beforeRegisterHook")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) BeforeRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.BeforeRegisterHook(&_SageRegistryV4.CallOpts)
}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) BeforeRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.BeforeRegisterHook(&_SageRegistryV4.CallOpts)
}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgent(opts *bind.CallOpts, agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgent", agentId)

	if err != nil {
		return *new(ISageRegistryV4AgentMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentMetadata)).(*ISageRegistryV4AgentMetadata)

	return out0, err

}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Session) GetAgent(agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgent(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgent(agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgent(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentByDID(opts *bind.CallOpts, did string) (ISageRegistryV4AgentMetadata, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentByDID", did)

	if err != nil {
		return *new(ISageRegistryV4AgentMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentMetadata)).(*ISageRegistryV4AgentMetadata)

	return out0, err

}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentByDID(did string) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgentByDID(&_SageRegistryV4.CallOpts, did)
}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentByDID(did string) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgentByDID(&_SageRegistryV4.CallOpts, did)
}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentKeys(opts *bind.CallOpts, agentId [32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentKeys", agentId)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentKeys(agentId [32]byte) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentKeys(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentKeys(agentId [32]byte) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentKeys(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentsByOwner(opts *bind.CallOpts, ownerAddress common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentsByOwner", ownerAddress)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentsByOwner(ownerAddress common.Address) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentsByOwner(&_SageRegistryV4.CallOpts, ownerAddress)
}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentsByOwner(ownerAddress common.Address) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentsByOwner(&_SageRegistryV4.CallOpts, ownerAddress)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4Caller) GetKey(opts *bind.CallOpts, keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getKey", keyHash)

	if err != nil {
		return *new(ISageRegistryV4AgentKey), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentKey)).(*ISageRegistryV4AgentKey)

	return out0, err

}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4Session) GetKey(keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	return _SageRegistryV4.Contract.GetKey(&_SageRegistryV4.CallOpts, keyHash)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetKey(keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	return _SageRegistryV4.Contract.GetKey(&_SageRegistryV4.CallOpts, keyHash)
}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Caller) IsAgentActive(opts *bind.CallOpts, agentId [32]byte) (bool, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "isAgentActive", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Session) IsAgentActive(agentId [32]byte) (bool, error) {
	return _SageRegistryV4.Contract.IsAgentActive(&_SageRegistryV4.CallOpts, agentId)
}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4CallerSession) IsAgentActive(agentId [32]byte) (bool, error) {
	return _SageRegistryV4.Contract.IsAgentActive(&_SageRegistryV4.CallOpts, agentId)
}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Caller) VerifyAgentOwnership(opts *bind.CallOpts, agentId [32]byte, claimedOwner common.Address) (bool, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "verifyAgentOwnership", agentId, claimedOwner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Session) VerifyAgentOwnership(agentId [32]byte, claimedOwner common.Address) (bool, error) {
	return _SageRegistryV4.Contract.VerifyAgentOwnership(&_SageRegistryV4.CallOpts, agentId, claimedOwner)
}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4CallerSession) VerifyAgentOwnership(agentId [32]byte, claimedOwner common.Address) (bool, error) {
	return _SageRegistryV4.Contract.VerifyAgentOwnership(&_SageRegistryV4.CallOpts, agentId, claimedOwner)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Transactor) AddKey(opts *bind.TransactOpts, agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "addKey", agentId, keyType, keyData, signature)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Session) AddKey(agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.AddKey(&_SageRegistryV4.TransactOpts, agentId, keyType, keyData, signature)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4TransactorSession) AddKey(agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.AddKey(&_SageRegistryV4.TransactOpts, agentId, keyType, keyData, signature)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) ApproveEd25519Key(opts *bind.TransactOpts, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "approveEd25519Key", keyHash)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Session) ApproveEd25519Key(keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.ApproveEd25519Key(&_SageRegistryV4.TransactOpts, keyHash)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) ApproveEd25519Key(keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.ApproveEd25519Key(&_SageRegistryV4.TransactOpts, keyHash)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) DeactivateAgent(opts *bind.TransactOpts, agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "deactivateAgent", agentId)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4Session) DeactivateAgent(agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.DeactivateAgent(&_SageRegistryV4.TransactOpts, agentId)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) DeactivateAgent(agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.DeactivateAgent(&_SageRegistryV4.TransactOpts, agentId)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Transactor) RegisterAgent(opts *bind.TransactOpts, params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "registerAgent", params)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Session) RegisterAgent(params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RegisterAgent(&_SageRegistryV4.TransactOpts, params)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4TransactorSession) RegisterAgent(params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RegisterAgent(&_SageRegistryV4.TransactOpts, params)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) RevokeKey(opts *bind.TransactOpts, agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "revokeKey", agentId, keyHash)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Session) RevokeKey(agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RevokeKey(&_SageRegistryV4.TransactOpts, agentId, keyHash)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) RevokeKey(agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RevokeKey(&_SageRegistryV4.TransactOpts, agentId, keyHash)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) SetAfterRegisterHook(opts *bind.TransactOpts, hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "setAfterRegisterHook", hook)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Session) SetAfterRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetAfterRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) SetAfterRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetAfterRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) SetBeforeRegisterHook(opts *bind.TransactOpts, hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "setBeforeRegisterHook", hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Session) SetBeforeRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetBeforeRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) SetBeforeRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetBeforeRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) UpdateAgent(opts *bind.TransactOpts, agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "updateAgent", agentId, name, description, endpoint, capabilities, signature)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4Session) UpdateAgent(agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.UpdateAgent(&_SageRegistryV4.TransactOpts, agentId, name, description, endpoint, capabilities, signature)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) UpdateAgent(agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.UpdateAgent(&_SageRegistryV4.TransactOpts, agentId, name, description, endpoint, capabilities, signature)
}

// SageRegistryV4AfterRegisterHookIterator is returned from FilterAfterRegisterHook and is used to iterate over the raw logs and unpacked data for AfterRegisterHook events raised by the SageRegistryV4 contract.
type SageRegistryV4AfterRegisterHookIterator struct {
	Event *SageRegistryV4AfterRegisterHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AfterRegisterHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AfterRegisterHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AfterRegisterHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AfterRegisterHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AfterRegisterHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AfterRegisterHook represents a AfterRegisterHook event raised by the SageRegistryV4 contract.
type SageRegistryV4AfterRegisterHook struct {
	AgentId  [32]byte
	Caller   common.Address
	HookData []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAfterRegisterHook is a free log retrieval operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAfterRegisterHook(opts *bind.FilterOpts, agentId [][32]byte, caller []common.Address) (*SageRegistryV4AfterRegisterHookIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AfterRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AfterRegisterHookIterator{contract: _SageRegistryV4.contract, event: "AfterRegisterHook", logs: logs, sub: sub}, nil
}

// WatchAfterRegisterHook is a free log subscription operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAfterRegisterHook(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AfterRegisterHook, agentId [][32]byte, caller []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AfterRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AfterRegisterHook)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AfterRegisterHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAfterRegisterHook is a log parse operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAfterRegisterHook(log types.Log) (*SageRegistryV4AfterRegisterHook, error) {
	event := new(SageRegistryV4AfterRegisterHook)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AfterRegisterHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentDeactivatedIterator is returned from FilterAgentDeactivated and is used to iterate over the raw logs and unpacked data for AgentDeactivated events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentDeactivatedIterator struct {
	Event *SageRegistryV4AgentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentDeactivated represents a AgentDeactivated event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentDeactivated struct {
	AgentId   [32]byte
	Owner     common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentDeactivated is a free log retrieval operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentDeactivated(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentDeactivatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentDeactivated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentDeactivatedIterator{contract: _SageRegistryV4.contract, event: "AgentDeactivated", logs: logs, sub: sub}, nil
}

// WatchAgentDeactivated is a free log subscription operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentDeactivated(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentDeactivated, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentDeactivated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentDeactivated)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentDeactivated is a log parse operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentDeactivated(log types.Log) (*SageRegistryV4AgentDeactivated, error) {
	event := new(SageRegistryV4AgentDeactivated)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentRegisteredIterator is returned from FilterAgentRegistered and is used to iterate over the raw logs and unpacked data for AgentRegistered events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentRegisteredIterator struct {
	Event *SageRegistryV4AgentRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentRegistered represents a AgentRegistered event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentRegistered struct {
	AgentId   [32]byte
	Owner     common.Address
	Did       string
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentRegistered is a free log retrieval operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentRegistered(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentRegisteredIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentRegistered", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentRegisteredIterator{contract: _SageRegistryV4.contract, event: "AgentRegistered", logs: logs, sub: sub}, nil
}

// WatchAgentRegistered is a free log subscription operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentRegistered(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentRegistered, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentRegistered", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentRegistered)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentRegistered is a log parse operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentRegistered(log types.Log) (*SageRegistryV4AgentRegistered, error) {
	event := new(SageRegistryV4AgentRegistered)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentUpdatedIterator is returned from FilterAgentUpdated and is used to iterate over the raw logs and unpacked data for AgentUpdated events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentUpdatedIterator struct {
	Event *SageRegistryV4AgentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentUpdated represents a AgentUpdated event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentUpdated struct {
	AgentId   [32]byte
	Owner     common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentUpdated is a free log retrieval operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentUpdated(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentUpdatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentUpdated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentUpdatedIterator{contract: _SageRegistryV4.contract, event: "AgentUpdated", logs: logs, sub: sub}, nil
}

// WatchAgentUpdated is a free log subscription operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentUpdated(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentUpdated, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentUpdated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentUpdated)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentUpdated is a log parse operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentUpdated(log types.Log) (*SageRegistryV4AgentUpdated, error) {
	event := new(SageRegistryV4AgentUpdated)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4BeforeRegisterHookIterator is returned from FilterBeforeRegisterHook and is used to iterate over the raw logs and unpacked data for BeforeRegisterHook events raised by the SageRegistryV4 contract.
type SageRegistryV4BeforeRegisterHookIterator struct {
	Event *SageRegistryV4BeforeRegisterHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4BeforeRegisterHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4BeforeRegisterHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4BeforeRegisterHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4BeforeRegisterHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4BeforeRegisterHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4BeforeRegisterHook represents a BeforeRegisterHook event raised by the SageRegistryV4 contract.
type SageRegistryV4BeforeRegisterHook struct {
	AgentId  [32]byte
	Caller   common.Address
	HookData []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBeforeRegisterHook is a free log retrieval operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterBeforeRegisterHook(opts *bind.FilterOpts, agentId [][32]byte, caller []common.Address) (*SageRegistryV4BeforeRegisterHookIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "BeforeRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4BeforeRegisterHookIterator{contract: _SageRegistryV4.contract, event: "BeforeRegisterHook", logs: logs, sub: sub}, nil
}

// WatchBeforeRegisterHook is a free log subscription operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchBeforeRegisterHook(opts *bind.WatchOpts, sink chan<- *SageRegistryV4BeforeRegisterHook, agentId [][32]byte, caller []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "BeforeRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4BeforeRegisterHook)
				if err := _SageRegistryV4.contract.UnpackLog(event, "BeforeRegisterHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeforeRegisterHook is a log parse operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseBeforeRegisterHook(log types.Log) (*SageRegistryV4BeforeRegisterHook, error) {
	event := new(SageRegistryV4BeforeRegisterHook)
	if err := _SageRegistryV4.contract.UnpackLog(event, "BeforeRegisterHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4Ed25519KeyApprovedIterator is returned from FilterEd25519KeyApproved and is used to iterate over the raw logs and unpacked data for Ed25519KeyApproved events raised by the SageRegistryV4 contract.
type SageRegistryV4Ed25519KeyApprovedIterator struct {
	Event *SageRegistryV4Ed25519KeyApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4Ed25519KeyApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4Ed25519KeyApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4Ed25519KeyApproved represents a Ed25519KeyApproved event raised by the SageRegistryV4 contract.
type SageRegistryV4Ed25519KeyApproved struct {
	KeyHash   [32]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEd25519KeyApproved is a free log retrieval operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterEd25519KeyApproved(opts *bind.FilterOpts, keyHash [][32]byte) (*SageRegistryV4Ed25519KeyApprovedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "Ed25519KeyApproved", keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Ed25519KeyApprovedIterator{contract: _SageRegistryV4.contract, event: "Ed25519KeyApproved", logs: logs, sub: sub}, nil
}

// WatchEd25519KeyApproved is a free log subscription operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchEd25519KeyApproved(opts *bind.WatchOpts, sink chan<- *SageRegistryV4Ed25519KeyApproved, keyHash [][32]byte) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "Ed25519KeyApproved", keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4Ed25519KeyApproved)
				if err := _SageRegistryV4.contract.UnpackLog(event, "Ed25519KeyApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEd25519KeyApproved is a log parse operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseEd25519KeyApproved(log types.Log) (*SageRegistryV4Ed25519KeyApproved, error) {
	event := new(SageRegistryV4Ed25519KeyApproved)
	if err := _SageRegistryV4.contract.UnpackLog(event, "Ed25519KeyApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4KeyAddedIterator is returned from FilterKeyAdded and is used to iterate over the raw logs and unpacked data for KeyAdded events raised by the SageRegistryV4 contract.
type SageRegistryV4KeyAddedIterator struct {
	Event *SageRegistryV4KeyAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4KeyAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4KeyAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4KeyAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4KeyAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4KeyAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4KeyAdded represents a KeyAdded event raised by the SageRegistryV4 contract.
type SageRegistryV4KeyAdded struct {
	AgentId   [32]byte
	KeyHash   [32]byte
	KeyType   uint8
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKeyAdded is a free log retrieval operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterKeyAdded(opts *bind.FilterOpts, agentId [][32]byte, keyHash [][32]byte) (*SageRegistryV4KeyAddedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "KeyAdded", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4KeyAddedIterator{contract: _SageRegistryV4.contract, event: "KeyAdded", logs: logs, sub: sub}, nil
}

// WatchKeyAdded is a free log subscription operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchKeyAdded(opts *bind.WatchOpts, sink chan<- *SageRegistryV4KeyAdded, agentId [][32]byte, keyHash [][32]byte) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "KeyAdded", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4KeyAdded)
				if err := _SageRegistryV4.contract.UnpackLog(event, "KeyAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyAdded is a log parse operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseKeyAdded(log types.Log) (*SageRegistryV4KeyAdded, error) {
	event := new(SageRegistryV4KeyAdded)
	if err := _SageRegistryV4.contract.UnpackLog(event, "KeyAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4KeyRevokedIterator is returned from FilterKeyRevoked and is used to iterate over the raw logs and unpacked data for KeyRevoked events raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRevokedIterator struct {
	Event *SageRegistryV4KeyRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4KeyRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4KeyRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4KeyRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4KeyRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4KeyRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4KeyRevoked represents a KeyRevoked event raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRevoked struct {
	AgentId   [32]byte
	KeyHash   [32]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKeyRevoked is a free log retrieval operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterKeyRevoked(opts *bind.FilterOpts, agentId [][32]byte, keyHash [][32]byte) (*SageRegistryV4KeyRevokedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "KeyRevoked", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4KeyRevokedIterator{contract: _SageRegistryV4.contract, event: "KeyRevoked", logs: logs, sub: sub}, nil
}

// WatchKeyRevoked is a free log subscription operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchKeyRevoked(opts *bind.WatchOpts, sink chan<- *SageRegistryV4KeyRevoked, agentId [][32]byte, keyHash [][32]byte) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "KeyRevoked", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4KeyRevoked)
				if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRevoked is a log parse operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseKeyRevoked(log types.Log) (*SageRegistryV4KeyRevoked, error) {
	event := new(SageRegistryV4KeyRevoked)
	if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
