// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registryv4

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISageRegistryV4AgentKey is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4AgentKey struct {
	KeyType      uint8
	KeyData      []byte
	Signature    []byte
	Verified     bool
	RegisteredAt *big.Int
}

// ISageRegistryV4AgentMetadata is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4AgentMetadata struct {
	Did          string
	Name         string
	Description  string
	Endpoint     string
	KeyHashes    [][32]byte
	Capabilities string
	Owner        common.Address
	RegisteredAt *big.Int
	UpdatedAt    *big.Int
	Active       bool
}

// ISageRegistryV4RegistrationParams is an auto generated low-level Go binding around an user-defined struct.
type ISageRegistryV4RegistrationParams struct {
	Did          string
	Name         string
	Description  string
	Endpoint     string
	KeyTypes     []uint8
	KeyData      [][]byte
	Signatures   [][]byte
	Capabilities string
}

// SageRegistryV4MetaData contains all meta data concerning the SageRegistryV4 contract.
var SageRegistryV4MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"AfterRegisterHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"BeforeRegisterHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Ed25519KeyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KeyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldKeyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KeyRotated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"keyData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterRegisterHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"approveEd25519Key\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeRegisterHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"deactivateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"getAgent\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structISageRegistryV4.AgentMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"getAgentByDID\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structISageRegistryV4.AgentMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"getAgentKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getAgentsByOwner\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"components\":[{\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"keyData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"internalType\":\"structISageRegistryV4.AgentKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"isAgentActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"enumISageRegistryV4.KeyType[]\",\"name\":\"keyTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keyData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"}],\"internalType\":\"structISageRegistryV4.RegistrationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"revokeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"oldKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumISageRegistryV4.KeyType\",\"name\":\"newKeyType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"newKeyData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newSignature\",\"type\":\"bytes\"}],\"name\":\"rotateKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setAfterRegisterHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setBeforeRegisterHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"capabilities\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimedOwner\",\"type\":\"address\"}],\"name\":\"verifyAgentOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523462000044576200001462000049565b604051613d03620000a9823960805181818161019101528181611a910152818161266501526127610152613d0390f35b600080fd5b6200005362000090565b33608052565b6200006962000069620000699290565b90565b62000069600162000059565b9062000069620000696200008c9262000059565b9055565b620000a66200009e6200006c565b600062000078565b56fe6080604052600436101561001257600080fd5b60003560e01c8063117803e31461015257806312aaac701461014d5780631a9cb151146101485780631ab6f8881461014357806324e6c5221461013e5780633a17bf0f146101395780633ae37799146101345780634136a33c1461012f57806359b5acf31461012a57806363bab821146101255780636d45ada514610120578063745e8f811461011b578063783f054c146101165780638051d5ea146101115780638a92792b1461010c578063a6c2af0114610107578063b08f566414610102578063d21a4764146100fd578063da7d9d8f146100f85763e45d486d0361015757610963565b610926565b61090b565b6108f3565b6108cc565b6107d7565b6107bc565b610798565b61076a565b610725565b61069f565b6105fe565b6105e3565b6105be565b6104a2565b610453565b610401565b61034c565b610302565b61017c565b600080fd5b600091031261015757565b6001600160a01b031690565b90565b9052565b565b346101575761018c36600461015c565b6101cb7f00000000000000000000000000000000000000000000000000000000000000005b604051918291826001600160a01b03909116815260200190565b0390f35b805b0361015757565b9050359061017a826101cf565b9060208282031261015757610173916101d8565b634e487b7160e01b600052602160045260246000fd5b6002111561021957565b6101f9565b9061017a8261020f565b6101739061021e565b61017690610228565b60005b83811061024d5750506000910152565b818101518382015260200161023d565b61027e61028760209361029193610272815190565b80835293849260200190565b9586910161023a565b601f01601f191690565b0190565b90610173906080806102dd6102cb60a085016102b960008901516000880190610231565b6020880151868203602088015261025d565b6040870151858203604087015261025d565b606080870151151590850152940151910152565b602080825261017392910190610295565b34610157576101cb61031d6103183660046101e5565b612569565b604051918291826102f1565b9190604083820312610157576101739061034381856101d8565b936020016101d8565b346101575761036561035f366004610329565b90611808565b604051005b6001600160a01b0381166101d1565b9050359061017a8261036a565b906020828203126101575761017391610379565b906103ba6103b36103a9845190565b8084529260200190565b9260200190565b9060005b8181106103cb5750505090565b9091926103e86103e16001928651815260200190565b9460200190565b9291016103be565b60208082526101739291019061039a565b34610157576101cb61041c610417366004610386565b6125c9565b604051918291826103f0565b610173916008021c6001600160a01b031690565b906101739154610428565b6101736000600761043c565b346101575761046336600461015c565b6101cb6101b1610447565b90816101009103126101575790565b906020828203126101575781356001600160401b03811161015757610173920161046e565b34610157576101cb6104bd6104b836600461047d565b611000565b6040515b9182918290815260200190565b909182601f83011215610157578135916001600160401b03831161015757602001926001830284011161015757565b91909160c0818403126101575761051483826101d8565b9260208201356001600160401b03811161015757816105349184016104ce565b92909360408201356001600160401b03811161015757836105569184016104ce565b92909360608201356001600160401b03811161015757816105789184016104ce565b92909360808201356001600160401b038111610157578361059a9184016104ce565b92909360a08201356001600160401b038111610157576105ba92016104ce565b9091565b34610157576103656105d13660046104fd565b99989098979197969296959395612102565b34610157576101cb6104bd6105f93660046101e5565b6125e5565b34610157576103656106113660046101e5565b6121e8565b6002111561015757565b9050359061017a82610616565b909160a0828403126101575761064383836101d8565b9261065181602085016101d8565b9261065f8260408301610620565b9260608201356001600160401b038111610157578361067f9184016104ce565b92909360808201356001600160401b038111610157576105ba92016104ce565b34610157576101cb6104bd6106b536600461062d565b95949094939193611a32565b9190608083820312610157576106d781846101d8565b926106e58260208301610620565b9260408201356001600160401b03811161015757836107059184016104ce565b92909360608201356001600160401b038111610157576105ba92016104ce565b34610157576101cb6104bd61073b3660046106c1565b94939093929192611389565b9190604083820312610157576101739061076181856101d8565b93602001610379565b34610157576101cb610786610780366004610747565b9061260f565b60405191829182901515815260200190565b34610157576103656107ab366004610386565b612743565b6101736000600661043c565b34610157576107cc36600461015c565b6101cb6101b16107b0565b34610157576101cb6107866107ed3660046101e5565b61263f565b90610173906101208061087e61086c61085a610848610836610824610140890160008c01518a820360008c015261025d565b60208b015189820360208b015261025d565b60408a015188820360408a015261025d565b6060890151878203606089015261025d565b6080880151868203608088015261039a565b60a087015185820360a087015261025d565b60c0808701516001600160a01b031690850152946108a160e082015160e0860152565b6108b2610100820151610100860152565b01511515910152565b6020808252610173929101906107f2565b34610157576101cb6108e76108e23660046101e5565b6123f7565b604051918291826108bb565b34610157576103656109063660046101e5565b611bc6565b34610157576101cb61041c6109213660046101e5565b6125a8565b3461015757610365610939366004610386565b6127a1565b906020828203126101575781356001600160401b038111610157576105ba92016104ce565b34610157576101cb6108e761097936600461093e565b9061247c565b906109919161098c61109d565b610d14565b9061017a6110cf565b903590601e19368290030182121561015757018035906001600160401b0382116101575760200191602082023603831361015757565b156109d757565b60405162461bcd60e51b815260206004820152601a60248201527f4b657920617272617973206c656e677468206d69736d617463680000000000006044820152606490fd5b0390fd5b15610a2757565b60405162461bcd60e51b815280610a1c600482016020808252818101527f5369676e617475726520617272617973206c656e677468206d69736d61746368604082015260600190565b6101736101736101739290565b610173600a610a70565b15610a8e57565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081ad95e4818dbdd5b9d607a1b6044820152606490fd5b903590601e19368290030182121561015757018035906001600160401b038211610157576020019136829003831361015757565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117610b3257604052565b610afb565b9061017a610b4460405190565b9283610b11565b6001600160401b038111610b3257602090601f01601f19160190565b90826000939282370152565b90929192610b88610b8382610b4b565b610b37565b938185526020850190828401116101575761017a92610b67565b610173913691610b73565b634e487b7160e01b600052603260045260246000fd5b90821015610bda5760206105ba9202810190610ac7565b610bad565b6001600160401b038111610b325760208091020190565b9080601f830112156101575781602061017393359101610b73565b929190610c20610b8382610bdf565b93818552602080860192028101918383116101575781905b838210610c46575050505050565b81356001600160401b03811161015757602091610c668784938701610bf6565b815201910190610c38565b610173913691610c11565b90610c89610b8383610bdf565b918252565b369037565b9061017a610ca9610ca384610c7c565b93610bdf565b601f190160208401610c8e565b634e487b7160e01b600052601160045260246000fd5b6000198114610cdb5760010190565b610cb6565b9190811015610bda576020020190565b3561017381610616565b90610d03825190565b811015610bda576020809102010190565b509060808201610d2c610d27828561099a565b905090565b92610d5260a0820194610d4c610d48610173610d27898761099a565b9190565b146109d0565b610d5f610d27838361099a565b93610d8160c0830195610d7b610d48610173610d278a8861099a565b14610a20565b610d8e610d27848461099a565b94600095610d9e610d4888610a70565b1180610fd8575b610dae90610a87565b85830193610dbc8585610ac7565b602086019791610dcc8988610ac7565b92610dd79192610ba2565b91610de191610ba2565b610dea916128c1565b610df48686610ac7565b90610dff868861099a565b610e088c610a70565b90610e1292610bc3565b92610e1d9192610ba2565b91610e2791610ba2565b610e3091612977565b95610e3b8187610ac7565b90610e46878961099a565b92610e519192610ba2565b91610e5b91610c71565b610e659189613a80565b610e6f838761099a565b610e799150610c93565b98610e8390610a70565b610e93610173610d27868a61099a565b811015610f1b5780610f118b610f0e83610f088d8d8d610f028e610efc8f88610ee6610f169f80610ee6610edf610eda610eec94610ed4610ef4998f61099a565b90610ce0565b610cf0565b998b61099a565b90610bc3565b95909861099a565b929095610ba2565b93610ba2565b92612c10565b92610cfa565b52565b610ccc565b610e83565b50610fd1949350610fcb9250610fbb90610fb5610fc3939a896101739a9b8a610faf610f53610f4a8884610ac7565b91909484610ac7565b929091610fa9610f8f610fa3610f9d610f6f60408a018a610ac7565b919098610f97610f8260608d018d610ac7565b96909c60e0810190610ac7565b98909d610ba2565b98610ba2565b97610ba2565b96610ba2565b95610ba2565b946137e4565b86610ac7565b93909561099a565b929094610ba2565b92610c71565b9083613ba4565b50610dae610fe9610d27868661099a565b610ff7610d48610173610a7d565b11159050610da5565b61017390600061097f565b6101739081565b610173905461100b565b6101736002610a70565b1561102d57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b90600019905b9181191691161790565b9061109261017361109992610a70565b8254611072565b9055565b61017a6110aa6000611012565b6110be6110b561101c565b91821415611026565b6000611082565b6101736001610a70565b61017a6110be6110c5565b905b600052602052604060002090565b61017390610167565b61017390546110ea565b1561110457565b60405162461bcd60e51b815260206004820152600f60248201526e2737ba1030b3b2b73a1037bbb732b960891b6044820152606490fd5b9061017396959493929161117661115e60066111588560016110da565b016110f3565b611170335b916001600160a01b031690565b146110fd565b61128c565b1561118257565b60405162461bcd60e51b815260206004820152601060248201526f4167656e74206e6f742061637469766560801b6044820152606490fd5b156111c157565b60405162461bcd60e51b815260206004820152600d60248201526c546f6f206d616e79206b65797360981b6044820152606490fd5b8054821015610bda57611210600191600052602060002090565b91020190600090565b9160001960089290920291821b911b611078565b919061123c6101736110999390565b908354611219565b90815491600160401b831015610b32578261126791600161017a950181556111f6565b9061122d565b91602061017a92949361128860408201966000830190610231565b0152565b509460019491939092906112a087876110da565b6009015460ff166112b09061117b565b6112ba87876110da565b600401546112c6610a7d565b116112d0906111ba565b6112d991610ba2565b916112e391610ba2565b6112ee918386612c10565b92836112fa82856110da565b6004019061130791611244565b8042938491611315916110da565b6008019061132291611082565b61132d8160056110da565b61133681611012565b61133f90610ccc565b61134891611082565b7f11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad139091849361137660405190565b918291611383918361126d565b0390a390565b610173959493929190600061113b565b9061017a916113b161115e60066111588460016110da565b611706565b156113bd57565b60405162461bcd60e51b815260206004820152600d60248201526c12d95e481b9bdd08199bdd5b99609a1b6044820152606490fd5b156113f957565b60405162461bcd60e51b815260206004820152601060248201526f12d95e481b9bdd081a5b881859d95b9d60821b6044820152606490fd5b1561143857565b60405162461bcd60e51b815260206004820152601660248201527543616e6e6f74207265766f6b65206c617374206b657960501b6044820152606490fd5b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156114ac575b60208310146114a757565b611476565b91607f169161149c565b906114c990600019906020036008021c90565b8154169055565b919061123c61017361109993610a70565b61017a916000916114d0565b8181106114f8575050565b8061150660006001936114e1565b016114ed565b600019600883021c1916906002021790565b9060009161153c61153482600052602060002090565b92835461150c565b905555565b919290602082101561159957601f84116001146115635761109992935061150c565b509061159461017a93600161158b61158085600052602060002090565b92601f602091010490565b820191016114ed565b61151e565b506115d982936115b0600194600052602060002090565b6115d26020601f860104820192601f8616806115e1575b50601f602091010490565b01906114ed565b600202179055565b6115ed908886036114b6565b386115c7565b929091600160401b8211610b32576020111561163a57602081101561161b576110999161150c565b60019160ff191661163184600052602060002090565b55600202019055565b60019150600202019055565b9081546116528161148c565b9081831161167b575b818310611669575b50505050565b61167293611541565b38808080611663565b611687838383876115f3565b61165b565b600061017a91611646565b634e487b7160e01b600052600060045260246000fd5b906000036116be5761017a9061168c565b611697565b600080825561017a916004906116dc83600183016116ad565b6116e983600283016116ad565b826003820155016114e1565b906000036116be5761017a906116c3565b90816117a76002611793611725600461171f87856110da565b01611012565b61173d600091611737610d4884610a70565b116113b6565b61174f61174a87876134f1565b6113f2565b61178e8660019461177f61176d60046117688b8a6110da565b015490565b611779610d4889610a70565b11611431565b611789828961340e565b6110da565b6116f5565b60086117a1429687936110da565b01611082565b6117c76117b58260056110da565b6117c1610f1182611012565b90611082565b6118036117f96117f57f209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f9390565b9390565b936104c160405190565b0390a3565b9061017a91611399565b906101739796959493929161183061115e60066111588560016110da565b6118fb565b1561183c57565b60405162461bcd60e51b815260206004820152601160248201527013db19081ad95e481b9bdd08199bdd5b99607a1b6044820152606490fd5b1561187c57565b60405162461bcd60e51b815260206004820152601460248201527313db19081ad95e481b9bdd081d995c9a599a595960621b6044820152606490fd5b156118bf57565b60405162461bcd60e51b815260206004820152601460248201527313db19081ad95e481b9bdd081a5b881859d95b9d60621b6044820152606490fd5b969094929193965060019561191086886110da565b6009015460ff166119209061117b565b60029761192d868a6110da565b60040161193990611012565b9460009561194687610a70565b1061195090611835565b61195a878b6110da565b6003015460ff1661196a90611875565b61197487896134f1565b61197d906118b8565b61198691610ba2565b9161199091610ba2565b9061199b9286612c10565b94826119a7818661340e565b6119b0916110da565b906119ba916116f5565b81429384916119c8916110da565b600801906119d591611082565b6119e08260056110da565b6119e981611012565b6119f290610ccc565b6119fb91611082565b907f447cd50ac51bdff6deb557fb3cc84b5fd08b82762c39b8e7b27d7ebf81b0c0158493611a2860405190565b908152602090a490565b610173969594939291906000611812565b15611a4a57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b61017a90611abc33611ab66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611163565b14611a43565b611b1f565b15611ac857565b60405162461bcd60e51b815260206004820152600f60248201526e4e6f742045643235353139206b657960881b6044820152606490fd5b9060ff90611078565b90611b1861017361109992151590565b8254611aff565b611b8a6002611b76611b36600461171f86856110da565b611b48600091611737610d4884610a70565b611b70611b6a611b6483611b5c89886110da565b015460ff1690565b9261021e565b9161021e565b14611ac1565b6003611b84846001936110da565b01611b08565b4290611bc1611bb77fd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad9290565b926104c160405190565b0390a2565b61017a90611a7c565b9061017a9a999897969594939291611bf061115e60066111588460016110da565b611f3e565b15611bfc57565b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b15611c3857565b60405162461bcd60e51b81526020600482015260156024820152744e6f207665726966696564204543445341206b657960581b6044820152606490fd5b919061028781611c8c816102919560209181520190565b8095610b67565b96611cdf60c09995611cfb9761017a9d9f9e9c966112889a95611cd191611ced988e611cc460e08201946000830152565b6020818503910152611c75565b918b830360408d0152611c75565b9188830360608a0152611c75565b918583036080870152611c75565b6001600160a01b0390971660a0830152565b80546000939291611d2a611d208361148c565b8085529360200190565b9160018116908115611d7c5750600114611d4357505050565b611d569192939450600052602060002090565b916000925b818410611d685750500190565b805484840152602090930192600101611d5b565b92949550505060ff1916825215156020020190565b9061017391611d0d565b9061017a611db592611dac60405190565b93848092611d91565b0383610b11565b61017390611d9b565b15611dcc57565b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b9190601f8111611e1457505050565b611e2661017a93600052602060002090565b906020601f840181900483019310611e46575b6020601f909101046115d2565b9091508190611e39565b91906001600160401b038211610b3257611e7482611e6e855461148c565b85611e05565b600090601f8311600114611ea257611099929160009183611e97575b505061150c565b013590503880611e90565b601f19831691611eb785600052602060002090565b92815b818110611ef557509160029391856001969410611edb575b50505002019055565b0135600019601f84166008021c19165b9055388080611ed2565b91936020600181928787013581550195019201611eba565b9061017a9291611e50565b61017390610167906001600160a01b031682565b61017390611f18565b61017390611f2c565b999887998585858e8a878f8e9b9d9f9a999a611f5b8560016110da565b6009015460ff16611f6b9061117b565b60009c86611f788f610a70565b10611f8290611bf5565b611f8b866132e7565b611f95819f610a70565b1415611fa090611c31565b611fab8660056110da565b611fb490611012565b94611fbe60405190565b998a9960208b01993397611fd29a8c611c93565b908103825203611fe29082610b11565b8051906020012091600295611ff790876110da565b6001019161200491610ba2565b9061200e90611dbc565b339161201993612f29565b61202290611dc5565b61202d8a60016110da565b6001019161203a92611f0d565b6120458860016110da565b019161205092611f0d565b61205b8560016110da565b6003019161206892611f0d565b6120738360016110da565b6005019161208092611f0d565b42908161208e8260016110da565b6008019061209b91611082565b6120a68160056110da565b6120af81611012565b6120b890610ccc565b6120c191611082565b7fb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e56120eb33611f35565b926120f560405190565b9081528060208101611803565b9061017a9a999897969594939291611bcf565b61017a9061212c61115e60066111588460016110da565b612176565b1561213857565b60405162461bcd60e51b81526020600482015260166024820152754167656e7420616c726561647920696e61637469766560501b6044820152606490fd5b806121b2600161219361218e6009611b5c86856110da565b612131565b6121a460006009611b8486856110da565b60086117a1429586936110da565b33906118036117f96121e27f529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f19390565b93611f35565b61017a90612115565b610173610140610b37565b6122046121f1565b906060825260208080808080808080808b0160608152016060815201606081520160608152016060815201600081520160005b81520160008152016000905250565b6101736121fc565b1561225557565b60405162461bcd60e51b815260206004820152600f60248201526e1059d95b9d081b9bdd08199bdd5b99608a1b6044820152606490fd5b906122a761229b6103a9845490565b92600052602060002090565b9060005b8181106122b85750505090565b9091926122dc6122d56001926122cd87611012565b815260200190565b9460010190565b9291016122ab565b906101739161228c565b9061017a611db5926122ff60405190565b938480926122e4565b9061017a6123e460096123196121f1565b9461232a61232682611d9b565b8752565b61234061233960018301611d9b565b6020880152565b61235661234f60028301611d9b565b6040880152565b61236c61236560038301611d9b565b6060880152565b61238261237b600483016122ee565b6080880152565b61239861239160058301611d9b565b60a0880152565b6123b76123a7600683016110f3565b6001600160a01b031660c0880152565b6123cd6123c660078301611012565b60e0880152565b611b5c6123dc60088301611012565b610100880152565b1515610120840152565b61017390612308565b61242e61017391612406612246565b50600161178961241b600761171f85856110da565b612428610d486000610a70565b1161224e565b6123ee565b90916102919083908093610b67565b610c89906020949361029193612433565b909161246b9061246260405190565b93849384612442565b03902090565b909161017392612453565b61249f61249a6101739361242e93612492612246565b506003612471565b611012565b6124b76124af6101736000610a70565b82141561224e565b60016110da565b61017360a0610b37565b6124d06124be565b9060008252602080808080860160608152016060612237565b6101736124c8565b906101769061021e565b9061017a612559600461250c6124be565b9461252161251b825460ff1690565b876124f1565b61253061233960018301611d9b565b61253f61234f60028301611d9b565b61171f612550600383015460ff1690565b15156060880152565b6080840152565b610173906124fb565b61259a610173916125786124e9565b50600261178961258d600461171f85856110da565b611737610d486000610a70565b612560565b610173906122ee565b60046125b961017392612406606090565b0161259f565b906110dc90611f35565b6125e0610173916125d8606090565b5060046125bf565b61259f565b61249a610173916125f4600090565b5061260861241b600761171f8460016110da565b60056110da565b61116361262e600661115861263b94612626600090565b5060016110da565b926001600160a01b031690565b1490565b6009611b5c61017392612626600090565b61017a9061268a33611ab66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611163565b612717565b6101676101736101739290565b6101739061268f565b156126ac57565b60405162461bcd60e51b815260206004820152601b60248201527f486f6f6b2063616e6e6f74206265207a65726f206164647265737300000000006044820152606490fd5b906001600160a01b0390611078565b9061271061017361109992611f35565b82546126f1565b61017a9061273c61272b610167600061269c565b6001600160a01b03831614156126a5565b6006612700565b61017a90612650565b61017a9061278633611ab66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611163565b61017a9061279a61272b610167600061269c565b6007612700565b61017a9061274c565b156127b157565b60405162461bcd60e51b815260206004820152600c60248201526b111251081c995c5d5a5c995960a21b6044820152606490fd5b6102916127fd926020926127f7815190565b94859290565b9384910161023a565b610c8961029191602094936127e5565b61246b61282260405190565b92839283612806565b61017391612816565b1561283b57565b60405162461bcd60e51b815260206004820152601660248201527511125108185b1c9958591e481c9959da5cdd195c995960521b6044820152606490fd5b6101736064610a70565b1561288a57565b60405162461bcd60e51b815260206004820152600f60248201526e546f6f206d616e79206167656e747360881b6044820152606490fd5b612923610d4861017361291d61249a610d48956129166129046128ee6129299a6101736128f26128ee8790565b5190565b6128fe60009d8e610a70565b116127aa565b612910610d488a610a70565b11611bf5565b600361282b565b93610a70565b14612834565b61017a61293e61293a3360046125bf565b5490565b61294c610d48610173612879565b10612883565b60408082526101739391926129699184019061025d565b91602081840391015261025d565b6129909161299c91604051938492602084019283612952565b90810382520382610b11565b6129ae6129a7825190565b9160200190565b2090565b6129d46101739492936129ca60608401956000850152565b6020830190610231565b604081840391015261025d565b156129e857565b60405162461bcd60e51b815260206004820152601660248201527512d95e48185b1c9958591e481c9959da5cdd195c995960521b6044820152606490fd5b611288612a5260609361017a96989795612a4560808601926000870152565b848203602086015261025d565b6001600160a01b039097166040830152565b15612a6b57565b60405162461bcd60e51b815260206004820152602360248201527f4543445341207369676e617475726520766572696669636174696f6e206661696044820152621b195960ea1b6064820152608490fd5b610173905161021e565b90611b1861017361109992610228565b90612adf815190565b906001600160401b038211610b3257612afc82611e6e855461148c565b602090601f8311600114612b2957611099929160009183612b1e57505061150c565b015190503880611e90565b601f19831691612b3e85600052602060002090565b9260005b818110612b7657509160029391856001969410612b625750505002019055565b01516000196008601f8516021c1916611eeb565b91936020600181928787015181550195019201612b42565b9061017a91612ad6565b61017a91906117c190608090600490612bba81612bb487612abc565b90612ac6565b612bd260018201612bcc602088015190565b90612b8e565b612be460028201612bcc604088015190565b612bfe60038201612bf86060880151151590565b90611b08565b0192016128ee565b9061017a91612b98565b61017392612cd291611789612ccb9694612c28600090565b50612c338482612df8565b604051612c4a8160208101612990888689846129b2565b612c556129a7825190565b20978894600294612c6b600461171f89896110da565b98612c8460009a612c7e610d488d610a70565b146129e1565b8991612c90600161021e565b612c998761021e565b14612cd7575b50612cc46125509293612cbd4297612cb56124be565b9d8e016124f1565b60208c0152565b60408a0152565b6080860152565b612c06565b6125509250612d26612cc4918584612990612d153394612cfb61249a8260056110da565b90612d0560405190565b9384928888602086019485612a26565b612d206129a7825190565b20612f29565b93612d3085612a64565b939250612c9f565b6101736040610a70565b6101736041610a70565b6101736021610a70565b15612d5d57565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964204543445341206b6579206c656e67746800000000000000006044820152606490fd5b6101736020610a70565b15612db357565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642045643235353139206b6579206c656e6774680000000000006044820152606490fd5b612e02600061021e565b612e0b8261021e565b03612e2a57505161017a90612e24610d48610173612da2565b14612dac565b612e37611b6a600161021e565b14612e3f5750565b80612e4b61017a925190565b612e59610d48610173612d38565b14908115612e87575b8115612e6f575b50612d56565b519050612e80610d48610173612d4c565b1438612e69565b9050612e91815190565b612e9f610d48610173612d42565b1490612e62565b90610291610c896020937f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0190565b15612ee057565b60405162461bcd60e51b815280610a1c600482016020808252818101527f5075626c6963206b657920646f6573206e6f74206d61746368207369676e6572604082015260600190565b61262e612f989493612f8d612f75612f929561116395612f47600090565b50612f64612f5460405190565b8092612990602083019182612ea6565b612f6f6129a7825190565b20613025565b612f876001600160a01b038816611163565b14611dc5565b61313f565b14612ed9565b600190565b15612fa457565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b61128861017a94613012606094989795613008608086019a6000870152565b60ff166020850152565b6040830152565b6040513d6000823e3d90fd5b6020916000918261304b613037845190565b613045610d48610173612d42565b14612f9d565b50613073848301519260606040820151910151851a9361306a60405190565b94859485612fe9565b838052039060015afa156130875760005190565b613019565b90613095825190565b811015610bda570160200190565b6130b66130b06101739290565b60f81b90565b6001600160f81b03191690565b156130ca57565b60405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420756e636f6d70726573736564206b657920707265666978006044820152606490fd5b90610c89610b8383610b4b565b9061017a610ca961312c8461310f565b93610b4b565b91908201809211610cdb57565b9060008251613152610d48610173612d42565b03613229576000926131a161318061317261316c87610a70565b8461308c565b516001600160f81b03191690565b61319b61318d60046130a3565b916001600160f81b03191690565b146130c3565b6131a9612d38565b926131b38461311c565b92836131be87610a70565b865b811015613206576131ff6131c0916131ed6131726131e76131e16001610a70565b84613132565b8961308c565b8a1a6131f9828a61308c565b53610ccc565b90506131be565b50935093509350505b61321a6129a7825190565b206001600160a01b0316919050565b9091613233815190565b613241610d48610173612d38565b1460000361320f5751613258610d48610173612d4c565b036132a25760405162461bcd60e51b815260206004820152601d60248201527f436f6d70726573736564206b657973206e6f7420737570706f727465640000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207075626c6963206b6579206c656e677468000000000000006044820152606490fd5b6132f860046125b9600193846110da565b6000908261330583610a70565b905b613318575b50506101739150610a70565b613323610173835190565b81101561339c5761334a61259a600261334461333f8587610cfa565b6128ee565b906110da565b613355848201612abc565b613361611b6a8761021e565b14908161338e575b5061337e576133788491610ccc565b90613307565b90610173935061333f9250610cfa565b606001511515905038613369565b61330c565b610173916008021c81565b9061017391546133a1565b91908203918211610cdb57565b634e487b7160e01b600052603160045260246000fd5b61017a9160009161122d565b8054801561340957600019019061340661340083836111f6565b906133da565b55565b6133c4565b906134206004610291600194856110da565b908261342c6000610a70565b905b613471575b60405162461bcd60e51b815260206004820152601660248201527512d95e481b9bdd08199bdd5b99081a5b881859d95b9d60521b6044820152606490fd5b61347c610173845490565b8110156134ec5761349661349082856111f6565b906133ac565b82146134ae57906134a78492610ccc565b909161342e565b6134e791506112676134e06134906134da61017a976134d46134ce895490565b91610a70565b906133b7565b866111f6565b91846111f6565b6133e6565b613433565b6125b9919061350660046001948593846110da565b9160009261351384610a70565b945b613522575b505050905090565b61352d610173825190565b8510156135615761354161333f8683610cfa565b821461355957613552839495610ccc565b9493613515565b505091505090565b61351a565b9061356f815190565b906001600160401b038211610b325761358c82611e6e855461148c565b602090601f83116001146135ae57611099929160009183612b1e57505061150c565b601f198316916135c385600052602060002090565b9260005b8181106135e757509160029391856001969410612b625750505002019055565b919360206001819287870151815501950192016135c7565b9061017a91613566565b818110613614575050565b8061362260006001936133da565b01613609565b909182811061363657505050565b61017a92906136449061229b565b9081019101613609565b90600160401b8111610b32578161366661017a935490565b90828155613628565b8151916001600160401b038311610b325761369961229b600192613693868661364e565b60200190565b92049160005b8381106136ac5750505050565b60019060206136bd610173866128ee565b940193818401550161369f565b9061017a9161366f565b90612bf8610120600961017a946136f9600082016136f3600088015190565b906135ff565b61370b600182016136f3602088015190565b61371d600282016136f3604088015190565b61372f600382016136f3606088015190565b61374760048201613741608088015190565b906136ca565b613759600582016136f360a088015190565b61377a6006820161377460c08801516001600160a01b031690565b90612700565b61378d600782016117c160e088016128ee565b6137a1600882016117c161010088016128ee565b01920151151590565b9061017a916136d4565b906110926101736110999290565b929160206137df61017a936040870190878203600089015261025d565b940152565b4296339691959294600193906137f86121f1565b87815295602087015260408601526060850152608084015260a083015261382b8560c08401906001600160a01b03169052565b6138368660e0840152565b61384286610100840152565b80151561012083015283613855916110da565b9061385f916137aa565b8161386b82600361282b565b90613875916137b4565b816138818460046125bf565b9061388b91611244565b6138968260056110da565b61389f81611012565b6138a890610ccc565b6138b191611082565b7f848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f491926138dd90611f35565b936138e760405190565b91829161180391836137c2565b906101739161025d565b9061391461390a835190565b8083529160200190565b90816139266020830284019460200190565b926000915b83831061393a57505050505090565b9091929394602061395d613956838560019503875289516138f4565b9760200190565b930193019193929061392b565b60408082526101739391926139819184019061025d565b9160208184039101526138fe565b60208082526101739291019061025d565b8015156101d1565b9050519061017a826139a0565b909291926139c5610b8382610b4b565b938185526020850190828401116101575761017a9261023a565b9080601f83011215610157578151610173926020016139b5565b91909160408184031261015757613a1083826139a8565b9260208201516001600160401b0381116101575761017392016139df565b6129d4610173949293613a4660608401956000850152565b6001600160a01b03166020830152565b15613a5e5750565b610a1c90613a6b60405190565b62461bcd60e51b81529182916004830161398f565b9091613a8c60066110f3565b91600092613a9f6111636101678661269c565b03613aaa5750505050565b613ad68392613aca95613abc60405190565b96879260208401928361396a565b90810382520385610b11565b33937fe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d82613b0387611f35565b91613b0d60405190565b80613b18868261398f565b0390a3613b5483613b34613b2f613b2f60066110f3565b611f35565b92613b5f637b319ba191613b4760405190565b998a978896879560e01b90565b855260048501613a2e565b03925af19081156130875761167292818093613b7d575b5050613a56565b909150613b9c92503d8091833e613b948183610b11565b8101906139f9565b903880613b76565b613bae60076110f3565b91600092613bc16111636101678661269c565b03613bcc5750505050565b613beb93613bf791613bdd60405190565b95869260208401928361396a565b90810382520384610b11565b613c07613b2f613b2f60076110f3565b9163c847ad353393803b1561015757613c2e918391613c2560405190565b93849260e01b90565b8252818381613c428b8b8b60048501613a2e565b03925af1801561308757613ca0575b5050613c94613c816121e27f3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c9390565b93613c8b60405190565b9182918261398f565b0390a338808080611663565b81613cbf92903d10613cc6575b613cb78183610b11565b81019061015c565b3880613c51565b503d613cad56fea264697066735822122054768f1a202cea93062dd1b54b43891559c573db78badb368907c2f6a94ed15c64736f6c63430008130033",
}

// SageRegistryV4ABI is the input ABI used to generate the binding from.
// Deprecated: Use SageRegistryV4MetaData.ABI instead.
var SageRegistryV4ABI = SageRegistryV4MetaData.ABI

// SageRegistryV4Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SageRegistryV4MetaData.Bin instead.
var SageRegistryV4Bin = SageRegistryV4MetaData.Bin

// DeploySageRegistryV4 deploys a new Ethereum contract, binding an instance of SageRegistryV4 to it.
func DeploySageRegistryV4(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SageRegistryV4, error) {
	parsed, err := SageRegistryV4MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SageRegistryV4Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SageRegistryV4{SageRegistryV4Caller: SageRegistryV4Caller{contract: contract}, SageRegistryV4Transactor: SageRegistryV4Transactor{contract: contract}, SageRegistryV4Filterer: SageRegistryV4Filterer{contract: contract}}, nil
}

// SageRegistryV4 is an auto generated Go binding around an Ethereum contract.
type SageRegistryV4 struct {
	SageRegistryV4Caller     // Read-only binding to the contract
	SageRegistryV4Transactor // Write-only binding to the contract
	SageRegistryV4Filterer   // Log filterer for contract events
}

// SageRegistryV4Caller is an auto generated read-only Go binding around an Ethereum contract.
type SageRegistryV4Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SageRegistryV4Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SageRegistryV4Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SageRegistryV4Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SageRegistryV4Session struct {
	Contract     *SageRegistryV4   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SageRegistryV4CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SageRegistryV4CallerSession struct {
	Contract *SageRegistryV4Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SageRegistryV4TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SageRegistryV4TransactorSession struct {
	Contract     *SageRegistryV4Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SageRegistryV4Raw is an auto generated low-level Go binding around an Ethereum contract.
type SageRegistryV4Raw struct {
	Contract *SageRegistryV4 // Generic contract binding to access the raw methods on
}

// SageRegistryV4CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SageRegistryV4CallerRaw struct {
	Contract *SageRegistryV4Caller // Generic read-only contract binding to access the raw methods on
}

// SageRegistryV4TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SageRegistryV4TransactorRaw struct {
	Contract *SageRegistryV4Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSageRegistryV4 creates a new instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4(address common.Address, backend bind.ContractBackend) (*SageRegistryV4, error) {
	contract, err := bindSageRegistryV4(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4{SageRegistryV4Caller: SageRegistryV4Caller{contract: contract}, SageRegistryV4Transactor: SageRegistryV4Transactor{contract: contract}, SageRegistryV4Filterer: SageRegistryV4Filterer{contract: contract}}, nil
}

// NewSageRegistryV4Caller creates a new read-only instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Caller(address common.Address, caller bind.ContractCaller) (*SageRegistryV4Caller, error) {
	contract, err := bindSageRegistryV4(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Caller{contract: contract}, nil
}

// NewSageRegistryV4Transactor creates a new write-only instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Transactor(address common.Address, transactor bind.ContractTransactor) (*SageRegistryV4Transactor, error) {
	contract, err := bindSageRegistryV4(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Transactor{contract: contract}, nil
}

// NewSageRegistryV4Filterer creates a new log filterer instance of SageRegistryV4, bound to a specific deployed contract.
func NewSageRegistryV4Filterer(address common.Address, filterer bind.ContractFilterer) (*SageRegistryV4Filterer, error) {
	contract, err := bindSageRegistryV4(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Filterer{contract: contract}, nil
}

// bindSageRegistryV4 binds a generic wrapper to an already deployed contract.
func bindSageRegistryV4(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SageRegistryV4MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SageRegistryV4 *SageRegistryV4Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SageRegistryV4.Contract.SageRegistryV4Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SageRegistryV4 *SageRegistryV4Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SageRegistryV4Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SageRegistryV4 *SageRegistryV4Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SageRegistryV4Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SageRegistryV4 *SageRegistryV4CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SageRegistryV4.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SageRegistryV4 *SageRegistryV4TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SageRegistryV4 *SageRegistryV4TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.contract.Transact(opts, method, params...)
}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) OWNER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "OWNER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) OWNER() (common.Address, error) {
	return _SageRegistryV4.Contract.OWNER(&_SageRegistryV4.CallOpts)
}

// OWNER is a free data retrieval call binding the contract method 0x117803e3.
//
// Solidity: function OWNER() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) OWNER() (common.Address, error) {
	return _SageRegistryV4.Contract.OWNER(&_SageRegistryV4.CallOpts)
}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) AfterRegisterHook(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "afterRegisterHook")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) AfterRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.AfterRegisterHook(&_SageRegistryV4.CallOpts)
}

// AfterRegisterHook is a free data retrieval call binding the contract method 0x24e6c522.
//
// Solidity: function afterRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) AfterRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.AfterRegisterHook(&_SageRegistryV4.CallOpts)
}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Caller) BeforeRegisterHook(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "beforeRegisterHook")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4Session) BeforeRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.BeforeRegisterHook(&_SageRegistryV4.CallOpts)
}

// BeforeRegisterHook is a free data retrieval call binding the contract method 0x8051d5ea.
//
// Solidity: function beforeRegisterHook() view returns(address)
func (_SageRegistryV4 *SageRegistryV4CallerSession) BeforeRegisterHook() (common.Address, error) {
	return _SageRegistryV4.Contract.BeforeRegisterHook(&_SageRegistryV4.CallOpts)
}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgent(opts *bind.CallOpts, agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgent", agentId)

	if err != nil {
		return *new(ISageRegistryV4AgentMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentMetadata)).(*ISageRegistryV4AgentMetadata)

	return out0, err

}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Session) GetAgent(agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgent(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgent is a free data retrieval call binding the contract method 0xa6c2af01.
//
// Solidity: function getAgent(bytes32 agentId) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgent(agentId [32]byte) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgent(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentByDID(opts *bind.CallOpts, did string) (ISageRegistryV4AgentMetadata, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentByDID", did)

	if err != nil {
		return *new(ISageRegistryV4AgentMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentMetadata)).(*ISageRegistryV4AgentMetadata)

	return out0, err

}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentByDID(did string) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgentByDID(&_SageRegistryV4.CallOpts, did)
}

// GetAgentByDID is a free data retrieval call binding the contract method 0xe45d486d.
//
// Solidity: function getAgentByDID(string did) view returns((string,string,string,string,bytes32[],string,address,uint256,uint256,bool))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentByDID(did string) (ISageRegistryV4AgentMetadata, error) {
	return _SageRegistryV4.Contract.GetAgentByDID(&_SageRegistryV4.CallOpts, did)
}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentKeys(opts *bind.CallOpts, agentId [32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentKeys", agentId)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentKeys(agentId [32]byte) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentKeys(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentKeys is a free data retrieval call binding the contract method 0xd21a4764.
//
// Solidity: function getAgentKeys(bytes32 agentId) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentKeys(agentId [32]byte) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentKeys(&_SageRegistryV4.CallOpts, agentId)
}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Caller) GetAgentsByOwner(opts *bind.CallOpts, ownerAddress common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getAgentsByOwner", ownerAddress)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4Session) GetAgentsByOwner(ownerAddress common.Address) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentsByOwner(&_SageRegistryV4.CallOpts, ownerAddress)
}

// GetAgentsByOwner is a free data retrieval call binding the contract method 0x1ab6f888.
//
// Solidity: function getAgentsByOwner(address ownerAddress) view returns(bytes32[])
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetAgentsByOwner(ownerAddress common.Address) ([][32]byte, error) {
	return _SageRegistryV4.Contract.GetAgentsByOwner(&_SageRegistryV4.CallOpts, ownerAddress)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4Caller) GetKey(opts *bind.CallOpts, keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getKey", keyHash)

	if err != nil {
		return *new(ISageRegistryV4AgentKey), err
	}

	out0 := *abi.ConvertType(out[0], new(ISageRegistryV4AgentKey)).(*ISageRegistryV4AgentKey)

	return out0, err

}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4Session) GetKey(keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	return _SageRegistryV4.Contract.GetKey(&_SageRegistryV4.CallOpts, keyHash)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(bytes32 keyHash) view returns((uint8,bytes,bytes,bool,uint256))
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetKey(keyHash [32]byte) (ISageRegistryV4AgentKey, error) {
	return _SageRegistryV4.Contract.GetKey(&_SageRegistryV4.CallOpts, keyHash)
}

// GetNonce is a free data retrieval call binding the contract method 0x4136a33c.
//
// Solidity: function getNonce(bytes32 agentId) view returns(uint256)
func (_SageRegistryV4 *SageRegistryV4Caller) GetNonce(opts *bind.CallOpts, agentId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "getNonce", agentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x4136a33c.
//
// Solidity: function getNonce(bytes32 agentId) view returns(uint256)
func (_SageRegistryV4 *SageRegistryV4Session) GetNonce(agentId [32]byte) (*big.Int, error) {
	return _SageRegistryV4.Contract.GetNonce(&_SageRegistryV4.CallOpts, agentId)
}

// GetNonce is a free data retrieval call binding the contract method 0x4136a33c.
//
// Solidity: function getNonce(bytes32 agentId) view returns(uint256)
func (_SageRegistryV4 *SageRegistryV4CallerSession) GetNonce(agentId [32]byte) (*big.Int, error) {
	return _SageRegistryV4.Contract.GetNonce(&_SageRegistryV4.CallOpts, agentId)
}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Caller) IsAgentActive(opts *bind.CallOpts, agentId [32]byte) (bool, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "isAgentActive", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Session) IsAgentActive(agentId [32]byte) (bool, error) {
	return _SageRegistryV4.Contract.IsAgentActive(&_SageRegistryV4.CallOpts, agentId)
}

// IsAgentActive is a free data retrieval call binding the contract method 0x8a92792b.
//
// Solidity: function isAgentActive(bytes32 agentId) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4CallerSession) IsAgentActive(agentId [32]byte) (bool, error) {
	return _SageRegistryV4.Contract.IsAgentActive(&_SageRegistryV4.CallOpts, agentId)
}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Caller) VerifyAgentOwnership(opts *bind.CallOpts, agentId [32]byte, claimedOwner common.Address) (bool, error) {
	var out []interface{}
	err := _SageRegistryV4.contract.Call(opts, &out, "verifyAgentOwnership", agentId, claimedOwner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4Session) VerifyAgentOwnership(agentId [32]byte, claimedOwner common.Address) (bool, error) {
	return _SageRegistryV4.Contract.VerifyAgentOwnership(&_SageRegistryV4.CallOpts, agentId, claimedOwner)
}

// VerifyAgentOwnership is a free data retrieval call binding the contract method 0x745e8f81.
//
// Solidity: function verifyAgentOwnership(bytes32 agentId, address claimedOwner) view returns(bool)
func (_SageRegistryV4 *SageRegistryV4CallerSession) VerifyAgentOwnership(agentId [32]byte, claimedOwner common.Address) (bool, error) {
	return _SageRegistryV4.Contract.VerifyAgentOwnership(&_SageRegistryV4.CallOpts, agentId, claimedOwner)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Transactor) AddKey(opts *bind.TransactOpts, agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "addKey", agentId, keyType, keyData, signature)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Session) AddKey(agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.AddKey(&_SageRegistryV4.TransactOpts, agentId, keyType, keyData, signature)
}

// AddKey is a paid mutator transaction binding the contract method 0x6d45ada5.
//
// Solidity: function addKey(bytes32 agentId, uint8 keyType, bytes keyData, bytes signature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4TransactorSession) AddKey(agentId [32]byte, keyType uint8, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.AddKey(&_SageRegistryV4.TransactOpts, agentId, keyType, keyData, signature)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) ApproveEd25519Key(opts *bind.TransactOpts, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "approveEd25519Key", keyHash)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Session) ApproveEd25519Key(keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.ApproveEd25519Key(&_SageRegistryV4.TransactOpts, keyHash)
}

// ApproveEd25519Key is a paid mutator transaction binding the contract method 0xb08f5664.
//
// Solidity: function approveEd25519Key(bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) ApproveEd25519Key(keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.ApproveEd25519Key(&_SageRegistryV4.TransactOpts, keyHash)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) DeactivateAgent(opts *bind.TransactOpts, agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "deactivateAgent", agentId)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4Session) DeactivateAgent(agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.DeactivateAgent(&_SageRegistryV4.TransactOpts, agentId)
}

// DeactivateAgent is a paid mutator transaction binding the contract method 0x59b5acf3.
//
// Solidity: function deactivateAgent(bytes32 agentId) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) DeactivateAgent(agentId [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.DeactivateAgent(&_SageRegistryV4.TransactOpts, agentId)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Transactor) RegisterAgent(opts *bind.TransactOpts, params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "registerAgent", params)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Session) RegisterAgent(params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RegisterAgent(&_SageRegistryV4.TransactOpts, params)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0x3a17bf0f.
//
// Solidity: function registerAgent((string,string,string,string,uint8[],bytes[],bytes[],string) params) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4TransactorSession) RegisterAgent(params ISageRegistryV4RegistrationParams) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RegisterAgent(&_SageRegistryV4.TransactOpts, params)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) RevokeKey(opts *bind.TransactOpts, agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "revokeKey", agentId, keyHash)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4Session) RevokeKey(agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RevokeKey(&_SageRegistryV4.TransactOpts, agentId, keyHash)
}

// RevokeKey is a paid mutator transaction binding the contract method 0x1a9cb151.
//
// Solidity: function revokeKey(bytes32 agentId, bytes32 keyHash) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) RevokeKey(agentId [32]byte, keyHash [32]byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RevokeKey(&_SageRegistryV4.TransactOpts, agentId, keyHash)
}

// RotateKey is a paid mutator transaction binding the contract method 0x63bab821.
//
// Solidity: function rotateKey(bytes32 agentId, bytes32 oldKeyHash, uint8 newKeyType, bytes newKeyData, bytes newSignature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Transactor) RotateKey(opts *bind.TransactOpts, agentId [32]byte, oldKeyHash [32]byte, newKeyType uint8, newKeyData []byte, newSignature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "rotateKey", agentId, oldKeyHash, newKeyType, newKeyData, newSignature)
}

// RotateKey is a paid mutator transaction binding the contract method 0x63bab821.
//
// Solidity: function rotateKey(bytes32 agentId, bytes32 oldKeyHash, uint8 newKeyType, bytes newKeyData, bytes newSignature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4Session) RotateKey(agentId [32]byte, oldKeyHash [32]byte, newKeyType uint8, newKeyData []byte, newSignature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RotateKey(&_SageRegistryV4.TransactOpts, agentId, oldKeyHash, newKeyType, newKeyData, newSignature)
}

// RotateKey is a paid mutator transaction binding the contract method 0x63bab821.
//
// Solidity: function rotateKey(bytes32 agentId, bytes32 oldKeyHash, uint8 newKeyType, bytes newKeyData, bytes newSignature) returns(bytes32)
func (_SageRegistryV4 *SageRegistryV4TransactorSession) RotateKey(agentId [32]byte, oldKeyHash [32]byte, newKeyType uint8, newKeyData []byte, newSignature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.RotateKey(&_SageRegistryV4.TransactOpts, agentId, oldKeyHash, newKeyType, newKeyData, newSignature)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) SetAfterRegisterHook(opts *bind.TransactOpts, hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "setAfterRegisterHook", hook)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Session) SetAfterRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetAfterRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetAfterRegisterHook is a paid mutator transaction binding the contract method 0xda7d9d8f.
//
// Solidity: function setAfterRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) SetAfterRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetAfterRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) SetBeforeRegisterHook(opts *bind.TransactOpts, hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "setBeforeRegisterHook", hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4Session) SetBeforeRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetBeforeRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// SetBeforeRegisterHook is a paid mutator transaction binding the contract method 0x783f054c.
//
// Solidity: function setBeforeRegisterHook(address hook) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) SetBeforeRegisterHook(hook common.Address) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.SetBeforeRegisterHook(&_SageRegistryV4.TransactOpts, hook)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4Transactor) UpdateAgent(opts *bind.TransactOpts, agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.contract.Transact(opts, "updateAgent", agentId, name, description, endpoint, capabilities, signature)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4Session) UpdateAgent(agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.UpdateAgent(&_SageRegistryV4.TransactOpts, agentId, name, description, endpoint, capabilities, signature)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0x3ae37799.
//
// Solidity: function updateAgent(bytes32 agentId, string name, string description, string endpoint, string capabilities, bytes signature) returns()
func (_SageRegistryV4 *SageRegistryV4TransactorSession) UpdateAgent(agentId [32]byte, name string, description string, endpoint string, capabilities string, signature []byte) (*types.Transaction, error) {
	return _SageRegistryV4.Contract.UpdateAgent(&_SageRegistryV4.TransactOpts, agentId, name, description, endpoint, capabilities, signature)
}

// SageRegistryV4AfterRegisterHookIterator is returned from FilterAfterRegisterHook and is used to iterate over the raw logs and unpacked data for AfterRegisterHook events raised by the SageRegistryV4 contract.
type SageRegistryV4AfterRegisterHookIterator struct {
	Event *SageRegistryV4AfterRegisterHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AfterRegisterHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AfterRegisterHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AfterRegisterHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AfterRegisterHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AfterRegisterHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AfterRegisterHook represents a AfterRegisterHook event raised by the SageRegistryV4 contract.
type SageRegistryV4AfterRegisterHook struct {
	AgentId  [32]byte
	Caller   common.Address
	HookData []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAfterRegisterHook is a free log retrieval operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAfterRegisterHook(opts *bind.FilterOpts, agentId [][32]byte, caller []common.Address) (*SageRegistryV4AfterRegisterHookIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AfterRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AfterRegisterHookIterator{contract: _SageRegistryV4.contract, event: "AfterRegisterHook", logs: logs, sub: sub}, nil
}

// WatchAfterRegisterHook is a free log subscription operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAfterRegisterHook(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AfterRegisterHook, agentId [][32]byte, caller []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AfterRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AfterRegisterHook)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AfterRegisterHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAfterRegisterHook is a log parse operation binding the contract event 0x3cb7ebe7deaec2743a657dc0d45c0ae4aaae6befdb78e20ca9f93d6d0023893c.
//
// Solidity: event AfterRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAfterRegisterHook(log types.Log) (*SageRegistryV4AfterRegisterHook, error) {
	event := new(SageRegistryV4AfterRegisterHook)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AfterRegisterHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentDeactivatedIterator is returned from FilterAgentDeactivated and is used to iterate over the raw logs and unpacked data for AgentDeactivated events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentDeactivatedIterator struct {
	Event *SageRegistryV4AgentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentDeactivated represents a AgentDeactivated event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentDeactivated struct {
	AgentId   [32]byte
	Owner     common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentDeactivated is a free log retrieval operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentDeactivated(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentDeactivatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentDeactivated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentDeactivatedIterator{contract: _SageRegistryV4.contract, event: "AgentDeactivated", logs: logs, sub: sub}, nil
}

// WatchAgentDeactivated is a free log subscription operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentDeactivated(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentDeactivated, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentDeactivated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentDeactivated)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentDeactivated is a log parse operation binding the contract event 0x529469922704beaa9a686518bed28d19385256536629b42365b7f4d9caca13f1.
//
// Solidity: event AgentDeactivated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentDeactivated(log types.Log) (*SageRegistryV4AgentDeactivated, error) {
	event := new(SageRegistryV4AgentDeactivated)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentRegisteredIterator is returned from FilterAgentRegistered and is used to iterate over the raw logs and unpacked data for AgentRegistered events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentRegisteredIterator struct {
	Event *SageRegistryV4AgentRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentRegistered represents a AgentRegistered event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentRegistered struct {
	AgentId   [32]byte
	Owner     common.Address
	Did       string
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentRegistered is a free log retrieval operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentRegistered(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentRegisteredIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentRegistered", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentRegisteredIterator{contract: _SageRegistryV4.contract, event: "AgentRegistered", logs: logs, sub: sub}, nil
}

// WatchAgentRegistered is a free log subscription operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentRegistered(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentRegistered, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentRegistered", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentRegistered)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentRegistered is a log parse operation binding the contract event 0x848b086b4ab56ffb70fbcbb34fd5e8f35d1dd5347ee5344efbe6c0f5b97c70f4.
//
// Solidity: event AgentRegistered(bytes32 indexed agentId, address indexed owner, string did, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentRegistered(log types.Log) (*SageRegistryV4AgentRegistered, error) {
	event := new(SageRegistryV4AgentRegistered)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4AgentUpdatedIterator is returned from FilterAgentUpdated and is used to iterate over the raw logs and unpacked data for AgentUpdated events raised by the SageRegistryV4 contract.
type SageRegistryV4AgentUpdatedIterator struct {
	Event *SageRegistryV4AgentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4AgentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4AgentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4AgentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4AgentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4AgentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4AgentUpdated represents a AgentUpdated event raised by the SageRegistryV4 contract.
type SageRegistryV4AgentUpdated struct {
	AgentId   [32]byte
	Owner     common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAgentUpdated is a free log retrieval operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterAgentUpdated(opts *bind.FilterOpts, agentId [][32]byte, owner []common.Address) (*SageRegistryV4AgentUpdatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "AgentUpdated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4AgentUpdatedIterator{contract: _SageRegistryV4.contract, event: "AgentUpdated", logs: logs, sub: sub}, nil
}

// WatchAgentUpdated is a free log subscription operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchAgentUpdated(opts *bind.WatchOpts, sink chan<- *SageRegistryV4AgentUpdated, agentId [][32]byte, owner []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "AgentUpdated", agentIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4AgentUpdated)
				if err := _SageRegistryV4.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentUpdated is a log parse operation binding the contract event 0xb28fb12b8366d2fb9a1adf15f6b59fcccc9e3b377eb5db8dcdc758c055dde5e5.
//
// Solidity: event AgentUpdated(bytes32 indexed agentId, address indexed owner, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseAgentUpdated(log types.Log) (*SageRegistryV4AgentUpdated, error) {
	event := new(SageRegistryV4AgentUpdated)
	if err := _SageRegistryV4.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4BeforeRegisterHookIterator is returned from FilterBeforeRegisterHook and is used to iterate over the raw logs and unpacked data for BeforeRegisterHook events raised by the SageRegistryV4 contract.
type SageRegistryV4BeforeRegisterHookIterator struct {
	Event *SageRegistryV4BeforeRegisterHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4BeforeRegisterHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4BeforeRegisterHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4BeforeRegisterHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4BeforeRegisterHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4BeforeRegisterHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4BeforeRegisterHook represents a BeforeRegisterHook event raised by the SageRegistryV4 contract.
type SageRegistryV4BeforeRegisterHook struct {
	AgentId  [32]byte
	Caller   common.Address
	HookData []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBeforeRegisterHook is a free log retrieval operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterBeforeRegisterHook(opts *bind.FilterOpts, agentId [][32]byte, caller []common.Address) (*SageRegistryV4BeforeRegisterHookIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "BeforeRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4BeforeRegisterHookIterator{contract: _SageRegistryV4.contract, event: "BeforeRegisterHook", logs: logs, sub: sub}, nil
}

// WatchBeforeRegisterHook is a free log subscription operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchBeforeRegisterHook(opts *bind.WatchOpts, sink chan<- *SageRegistryV4BeforeRegisterHook, agentId [][32]byte, caller []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "BeforeRegisterHook", agentIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4BeforeRegisterHook)
				if err := _SageRegistryV4.contract.UnpackLog(event, "BeforeRegisterHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeforeRegisterHook is a log parse operation binding the contract event 0xe9e7066ed0bb4551380e108afced4a59ed1503dccf6c69f572e8f0b2686b7e6d.
//
// Solidity: event BeforeRegisterHook(bytes32 indexed agentId, address indexed caller, bytes hookData)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseBeforeRegisterHook(log types.Log) (*SageRegistryV4BeforeRegisterHook, error) {
	event := new(SageRegistryV4BeforeRegisterHook)
	if err := _SageRegistryV4.contract.UnpackLog(event, "BeforeRegisterHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4Ed25519KeyApprovedIterator is returned from FilterEd25519KeyApproved and is used to iterate over the raw logs and unpacked data for Ed25519KeyApproved events raised by the SageRegistryV4 contract.
type SageRegistryV4Ed25519KeyApprovedIterator struct {
	Event *SageRegistryV4Ed25519KeyApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4Ed25519KeyApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4Ed25519KeyApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4Ed25519KeyApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4Ed25519KeyApproved represents a Ed25519KeyApproved event raised by the SageRegistryV4 contract.
type SageRegistryV4Ed25519KeyApproved struct {
	KeyHash   [32]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEd25519KeyApproved is a free log retrieval operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterEd25519KeyApproved(opts *bind.FilterOpts, keyHash [][32]byte) (*SageRegistryV4Ed25519KeyApprovedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "Ed25519KeyApproved", keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4Ed25519KeyApprovedIterator{contract: _SageRegistryV4.contract, event: "Ed25519KeyApproved", logs: logs, sub: sub}, nil
}

// WatchEd25519KeyApproved is a free log subscription operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchEd25519KeyApproved(opts *bind.WatchOpts, sink chan<- *SageRegistryV4Ed25519KeyApproved, keyHash [][32]byte) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "Ed25519KeyApproved", keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4Ed25519KeyApproved)
				if err := _SageRegistryV4.contract.UnpackLog(event, "Ed25519KeyApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEd25519KeyApproved is a log parse operation binding the contract event 0xd21ccfb64f959401f8286dc090d479c2014eb3ac0bd4b8d7bcecfd16e24bcdad.
//
// Solidity: event Ed25519KeyApproved(bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseEd25519KeyApproved(log types.Log) (*SageRegistryV4Ed25519KeyApproved, error) {
	event := new(SageRegistryV4Ed25519KeyApproved)
	if err := _SageRegistryV4.contract.UnpackLog(event, "Ed25519KeyApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4KeyAddedIterator is returned from FilterKeyAdded and is used to iterate over the raw logs and unpacked data for KeyAdded events raised by the SageRegistryV4 contract.
type SageRegistryV4KeyAddedIterator struct {
	Event *SageRegistryV4KeyAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4KeyAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4KeyAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4KeyAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4KeyAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4KeyAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4KeyAdded represents a KeyAdded event raised by the SageRegistryV4 contract.
type SageRegistryV4KeyAdded struct {
	AgentId   [32]byte
	KeyHash   [32]byte
	KeyType   uint8
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKeyAdded is a free log retrieval operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterKeyAdded(opts *bind.FilterOpts, agentId [][32]byte, keyHash [][32]byte) (*SageRegistryV4KeyAddedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "KeyAdded", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4KeyAddedIterator{contract: _SageRegistryV4.contract, event: "KeyAdded", logs: logs, sub: sub}, nil
}

// WatchKeyAdded is a free log subscription operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchKeyAdded(opts *bind.WatchOpts, sink chan<- *SageRegistryV4KeyAdded, agentId [][32]byte, keyHash [][32]byte) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "KeyAdded", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4KeyAdded)
				if err := _SageRegistryV4.contract.UnpackLog(event, "KeyAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyAdded is a log parse operation binding the contract event 0x11f138c8931fc92ab4fbeb5dd32df17d56c9411a543739c3526ed0265d8fad13.
//
// Solidity: event KeyAdded(bytes32 indexed agentId, bytes32 indexed keyHash, uint8 keyType, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseKeyAdded(log types.Log) (*SageRegistryV4KeyAdded, error) {
	event := new(SageRegistryV4KeyAdded)
	if err := _SageRegistryV4.contract.UnpackLog(event, "KeyAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4KeyRevokedIterator is returned from FilterKeyRevoked and is used to iterate over the raw logs and unpacked data for KeyRevoked events raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRevokedIterator struct {
	Event *SageRegistryV4KeyRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4KeyRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4KeyRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4KeyRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4KeyRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4KeyRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4KeyRevoked represents a KeyRevoked event raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRevoked struct {
	AgentId   [32]byte
	KeyHash   [32]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKeyRevoked is a free log retrieval operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterKeyRevoked(opts *bind.FilterOpts, agentId [][32]byte, keyHash [][32]byte) (*SageRegistryV4KeyRevokedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "KeyRevoked", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4KeyRevokedIterator{contract: _SageRegistryV4.contract, event: "KeyRevoked", logs: logs, sub: sub}, nil
}

// WatchKeyRevoked is a free log subscription operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchKeyRevoked(opts *bind.WatchOpts, sink chan<- *SageRegistryV4KeyRevoked, agentId [][32]byte, keyHash [][32]byte) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "KeyRevoked", agentIdRule, keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4KeyRevoked)
				if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRevoked is a log parse operation binding the contract event 0x209fb85e2522622566ffdf13e48258218f4c155aefc75703539e1a971380cd3f.
//
// Solidity: event KeyRevoked(bytes32 indexed agentId, bytes32 indexed keyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseKeyRevoked(log types.Log) (*SageRegistryV4KeyRevoked, error) {
	event := new(SageRegistryV4KeyRevoked)
	if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SageRegistryV4KeyRotatedIterator is returned from FilterKeyRotated and is used to iterate over the raw logs and unpacked data for KeyRotated events raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRotatedIterator struct {
	Event *SageRegistryV4KeyRotated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SageRegistryV4KeyRotatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SageRegistryV4KeyRotated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SageRegistryV4KeyRotated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SageRegistryV4KeyRotatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SageRegistryV4KeyRotatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SageRegistryV4KeyRotated represents a KeyRotated event raised by the SageRegistryV4 contract.
type SageRegistryV4KeyRotated struct {
	AgentId    [32]byte
	OldKeyHash [32]byte
	NewKeyHash [32]byte
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterKeyRotated is a free log retrieval operation binding the contract event 0x447cd50ac51bdff6deb557fb3cc84b5fd08b82762c39b8e7b27d7ebf81b0c015.
//
// Solidity: event KeyRotated(bytes32 indexed agentId, bytes32 indexed oldKeyHash, bytes32 indexed newKeyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) FilterKeyRotated(opts *bind.FilterOpts, agentId [][32]byte, oldKeyHash [][32]byte, newKeyHash [][32]byte) (*SageRegistryV4KeyRotatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var oldKeyHashRule []interface{}
	for _, oldKeyHashItem := range oldKeyHash {
		oldKeyHashRule = append(oldKeyHashRule, oldKeyHashItem)
	}
	var newKeyHashRule []interface{}
	for _, newKeyHashItem := range newKeyHash {
		newKeyHashRule = append(newKeyHashRule, newKeyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.FilterLogs(opts, "KeyRotated", agentIdRule, oldKeyHashRule, newKeyHashRule)
	if err != nil {
		return nil, err
	}
	return &SageRegistryV4KeyRotatedIterator{contract: _SageRegistryV4.contract, event: "KeyRotated", logs: logs, sub: sub}, nil
}

// WatchKeyRotated is a free log subscription operation binding the contract event 0x447cd50ac51bdff6deb557fb3cc84b5fd08b82762c39b8e7b27d7ebf81b0c015.
//
// Solidity: event KeyRotated(bytes32 indexed agentId, bytes32 indexed oldKeyHash, bytes32 indexed newKeyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) WatchKeyRotated(opts *bind.WatchOpts, sink chan<- *SageRegistryV4KeyRotated, agentId [][32]byte, oldKeyHash [][32]byte, newKeyHash [][32]byte) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var oldKeyHashRule []interface{}
	for _, oldKeyHashItem := range oldKeyHash {
		oldKeyHashRule = append(oldKeyHashRule, oldKeyHashItem)
	}
	var newKeyHashRule []interface{}
	for _, newKeyHashItem := range newKeyHash {
		newKeyHashRule = append(newKeyHashRule, newKeyHashItem)
	}

	logs, sub, err := _SageRegistryV4.contract.WatchLogs(opts, "KeyRotated", agentIdRule, oldKeyHashRule, newKeyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SageRegistryV4KeyRotated)
				if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRotated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRotated is a log parse operation binding the contract event 0x447cd50ac51bdff6deb557fb3cc84b5fd08b82762c39b8e7b27d7ebf81b0c015.
//
// Solidity: event KeyRotated(bytes32 indexed agentId, bytes32 indexed oldKeyHash, bytes32 indexed newKeyHash, uint256 timestamp)
func (_SageRegistryV4 *SageRegistryV4Filterer) ParseKeyRotated(log types.Log) (*SageRegistryV4KeyRotated, error) {
	event := new(SageRegistryV4KeyRotated)
	if err := _SageRegistryV4.contract.UnpackLog(event, "KeyRotated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
